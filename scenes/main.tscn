[gd_scene load_steps=17 format=3 uid="uid://j06ed3mkvnqy"]

[ext_resource type="PackedScene" uid="uid://b18i2oluo7rvl" path="res://scenes/player.tscn" id="1_y6aoc"]
[ext_resource type="Material" uid="uid://c217ps3757wlm" path="res://skybox.tres" id="3_1gn02"]
[ext_resource type="Terrain3DStorage" uid="uid://lalq1xnmbjdl" path="res://terrain/terrain_storage.res" id="3_g5m1t"]
[ext_resource type="Terrain3DAssets" uid="uid://dal3jhw6241qg" path="res://terrain/terrain_assets.tres" id="5_l6jr1"]
[ext_resource type="PackedScene" uid="uid://c2pwp14naju7n" path="res://scenes/TestArbiter.tscn" id="6_2m7rr"]
[ext_resource type="PackedScene" uid="uid://ddovo8pym3mts" path="res://scenes/turk.tscn" id="6_x66dh"]

[sub_resource type="Sky" id="Sky_e10e3"]
sky_material = ExtResource("3_1gn02")

[sub_resource type="Environment" id="Environment_3d6es"]
background_mode = 2
sky = SubResource("Sky_e10e3")
ambient_light_color = Color(0.572988, 0.572988, 0.572988, 1)

[sub_resource type="WorldBoundaryShape3D" id="WorldBoundaryShape3D_fc7yi"]

[sub_resource type="BoxMesh" id="BoxMesh_qfr0p"]
size = Vector3(60, 2, 60)

[sub_resource type="NavigationMesh" id="NavigationMesh_3mdr1"]
vertices = PackedVector3Array(324.074, 104.354, 393.393, 325.325, 104.354, 394.394, 325.575, 104.605, 393.393, 285.285, 98.8488, 321.071, 284.284, 99.099, 321.321, 284.034, 99.099, 322.072, 284.284, 98.8488, 324.074, 283.283, 98.8488, 324.324, 283.033, 98.8488, 325.325, 282.282, 98.8488, 328.078, 281.281, 98.8488, 328.328, 281.031, 98.8488, 329.329, 314.815, 103.103, 394.394, 316.316, 103.103, 394.394, 316.566, 103.353, 393.393, 314.064, 103.103, 393.393, 325.575, 101.101, 311.311, 324.825, 100.851, 310.31, 323.573, 100.601, 310.31, 291.291, 98.098, 302.052, 290.29, 98.098, 302.302, 290.29, 98.3483, 304.054, 279.279, 98.5985, 332.082, 278.278, 98.5985, 332.332, 278.278, 98.5985, 334.084, 280.28, 98.098, 340.59, 280.28, 98.098, 341.842, 281.281, 98.098, 342.592, 287.287, 103.353, 379.629, 287.287, 103.604, 380.881, 288.288, 103.604, 381.631, 299.049, 103.854, 391.391, 299.799, 103.854, 392.392, 301.051, 103.604, 392.392, 281.281, 98.3483, 351.101, 281.281, 98.5985, 354.604, 282.282, 100.1, 362.612, 283.283, 101.101, 366.616, 282.282, 99.099, 358.108, 282.282, 98.8488, 325.325, 280.28, 98.3483, 351.351, 280.28, 98.5985, 353.854, 292.542, 97.5975, 299.299, 291.291, 97.5975, 298.298, 338.588, 105.105, 318.318, 337.838, 104.855, 317.317, 335.585, 104.104, 317.317, 294.294, 98.5985, 337.087, 312.812, 100.1, 329.329, 327.577, 102.102, 323.073, 330.33, 102.603, 319.82, 318.068, 100.601, 325.575, 290.04, 98.3483, 338.588, 331.581, 102.853, 314.314, 330.831, 102.603, 313.313, 328.578, 101.852, 313.313, 289.289, 98.5985, 304.304, 289.289, 98.5985, 307.057, 288.288, 98.8488, 311.061, 287.287, 99.099, 311.311, 287.287, 99.099, 314.064, 286.286, 99.099, 314.314, 286.286, 99.099, 317.067, 305.555, 98.3483, 301.301, 319.569, 99.8498, 308.809, 312.062, 98.8488, 304.554, 279.279, 98.8488, 329.329, 301.802, 103.604, 393.393, 306.807, 103.103, 392.893, 307.307, 103.103, 393.393, 326.827, 101.351, 311.311, 296.046, 103.854, 389.389, 297.798, 103.854, 391.391, 277.277, 98.5985, 334.334, 277.277, 98.098, 337.838, 296.546, 97.5975, 300.3, 295.796, 97.5975, 299.299, 288.288, 98.8488, 307.307, 285.285, 99.099, 317.317, 282.282, 100.851, 365.866, 284.284, 102.102, 371.621, 284.284, 102.853, 374.875, 285.285, 102.853, 375.625, 281.782, 98.098, 336.837, 285.285, 103.353, 377.878, 318.318, 99.8498, 305.055, 318.318, 99.8498, 303.804, 315.816, 99.5995, 301.301, 314.564, 99.3493, 301.301, 313.814, 99.099, 300.3, 309.309, 98.5985, 300.3, 309.059, 98.5985, 301.301, 332.833, 103.353, 314.314, 283.283, 102.102, 370.871, 332.582, 106.356, 392.392, 337.337, 107.608, 392.392, 337.587, 107.608, 391.391, 340.59, 108.358, 391.391, 340.841, 105.856, 318.318, 283.533, 98.5985, 354.104, 286.536, 102.102, 371.621, 297.798, 103.103, 383.633, 310.56, 103.103, 386.136, 320.07, 103.854, 387.888, 332.833, 106.106, 390.39, 340.59, 107.107, 372.622, 340.841, 105.856, 341.842, 312.812, 103.103, 377.377, 327.828, 104.104, 357.858, 291.792, 100.35, 360.861, 303.804, 100.851, 357.858, 324.825, 104.354, 374.374, 293.293, 98.8488, 345.846, 287.287, 100.35, 363.864, 294.795, 102.352, 374.374, 297.798, 101.602, 369.87, 308.308, 102.352, 368.368, 312.812, 102.352, 365.365, 335.335, 106.857, 386.386, 329.329, 105.355, 386.386, 335.335, 104.605, 333.834, 338.338, 104.855, 324.825, 329.329, 103.103, 333.834, 284.284, 98.098, 345.846, 297.798, 102.853, 378.879, 300.801, 102.352, 375.876, 306.807, 103.103, 381.882, 293.293, 102.352, 375.876, 308.058, 103.103, 392.893, 298.298, 98.098, 305.555, 303.804, 98.8488, 320.32, 332.332, 106.106, 393.393, 281.281, 100.1, 361.862, 329.579, 105.355, 392.642, 304.805, 98.098, 300.3, 320.32, 103.604, 392.392, 288.288, 103.854, 382.883, 294.795, 103.854, 389.389, 345.595, 107.357, 320.32, 344.845, 107.107, 319.319, 343.593, 106.607, 319.319, 342.843, 106.356, 318.318, 341.842, 108.859, 392.392, 344.845, 109.86, 392.392, 346.346, 107.608, 320.32, 345.345, 106.857, 325.075, 344.344, 106.607, 338.588, 342.592, 107.107, 363.864, 345.095, 108.859, 385.385, 345.345, 108.108, 373.874, 345.595, 107.357, 352.853, 346.346, 107.107, 327.327, 394.394, 118.368, 349.099, 394.394, 118.619, 347.848, 393.393, 118.368, 347.097, 386.636, 117.367, 340.34, 385.886, 117.367, 339.339, 384.634, 117.117, 339.339, 383.884, 117.117, 338.338, 382.632, 116.867, 338.338, 376.626, 115.616, 335.335, 375.876, 115.616, 334.334, 374.624, 115.115, 334.334, 373.874, 115.115, 333.333, 372.622, 114.865, 333.333, 371.872, 114.615, 332.332, 370.62, 114.364, 332.332, 366.616, 113.363, 330.33, 365.866, 113.113, 329.329, 364.614, 112.863, 329.329, 358.608, 111.111, 327.327, 357.858, 110.861, 326.326, 356.606, 110.36, 326.326, 352.602, 109.359, 323.323, 351.852, 109.109, 322.322, 350.6, 108.859, 322.322, 397.397, 118.869, 351.852, 396.897, 118.869, 350.35, 395.645, 118.619, 350.35, 387.137, 124.374, 395.395, 387.888, 124.875, 396.396, 389.89, 125.125, 396.396, 394.644, 118.869, 363.363, 391.641, 119.87, 376.626, 388.889, 121.872, 388.138, 391.141, 122.623, 389.139, 393.143, 120.37, 377.627, 395.896, 118.869, 360.61, 390.39, 117.868, 343.093, 390.39, 118.118, 341.842, 388.889, 117.868, 340.34, 379.629, 116.366, 336.336, 378.879, 116.366, 335.335, 363.864, 112.613, 328.328, 361.611, 111.862, 328.328, 360.861, 111.862, 327.327, 349.85, 108.609, 321.321, 347.597, 107.858, 321.321, 380.881, 116.617, 336.336, 378.128, 121.371, 393.393, 378.879, 121.872, 394.394, 382.132, 122.623, 394.394, 368.869, 113.864, 330.33, 393.393, 118.368, 345.846, 353.854, 109.86, 323.323, 382.883, 123.373, 395.395, 384.134, 117.117, 339.589, 393.143, 118.368, 361.361, 386.887, 118.619, 374.624, 382.382, 119.369, 383.884, 386.386, 121.121, 386.386, 345.095, 109.109, 387.888, 345.846, 107.858, 364.865, 346.847, 107.357, 344.344, 347.347, 107.357, 330.58, 368.368, 113.614, 333.834, 377.627, 115.616, 339.589, 387.387, 117.367, 345.595, 366.116, 113.113, 332.082, 345.846, 110.11, 393.393, 357.607, 114.114, 393.393, 363.363, 116.617, 393.393, 362.362, 111.361, 342.843, 356.356, 111.612, 381.882, 374.374, 114.364, 359.359, 378.879, 116.366, 371.371, 360.861, 114.364, 389.389, 374.374, 118.118, 386.386, 375.876, 114.615, 345.846, 387.888, 117.367, 348.849, 387.888, 117.618, 360.861, 369.87, 114.865, 375.876, 365.365, 113.113, 372.873, 387.888, 117.117, 353.353, 368.368, 115.115, 381.882, 356.356, 110.11, 336.837, 365.365, 115.866, 389.389, 374.374, 116.867, 381.882, 387.888, 117.618, 363.864, 409.409, 120.871, 361.111, 409.409, 120.871, 360.36, 408.658, 120.621, 360.36, 396.146, 126.376, 397.397, 396.897, 126.877, 398.398, 398.148, 126.877, 398.398, 402.152, 128.128, 400.4, 402.903, 128.629, 401.401, 404.154, 128.879, 401.401, 407.908, 120.621, 359.359, 406.656, 120.37, 359.359, 405.906, 120.37, 358.358, 404.654, 120.12, 358.358, 404.905, 129.129, 402.402, 406.907, 129.63, 402.402, 399.9, 127.878, 400.4, 416.416, 122.372, 369.119, 416.416, 122.122, 367.868, 390.891, 125.876, 397.397, 400.901, 119.62, 354.354, 399.649, 119.369, 354.354, 422.422, 124.625, 375.876, 422.422, 124.124, 374.875, 418.919, 122.873, 372.122, 418.418, 122.623, 371.121, 397.147, 119.369, 364.614, 394.644, 120.37, 376.126, 391.892, 122.372, 387.637, 398.398, 125.876, 395.395, 415.415, 125.876, 381.381, 398.398, 121.121, 375.876, 402.903, 121.872, 374.374, 408.909, 123.624, 378.879, 402.903, 121.121, 371.371, 413.413, 123.624, 375.876, 405.906, 124.875, 384.885, 404.404, 122.873, 378.879, 413.413, 128.629, 391.141, 418.668, 126.877, 382.132, 413.163, 132.633, 407.407, 414.915, 133.633, 409.409, 416.166, 133.884, 409.409, 420.42, 136.386, 413.914, 421.671, 136.386, 412.662, 411.912, 132.382, 407.407, 422.672, 124.875, 376.376, 421.671, 134.635, 406.907, 422.172, 131.131, 390.891, 422.422, 129.63, 386.636, 427.177, 136.386, 407.157, 428.178, 128.629, 381.882, 427.928, 131.632, 387.888, 426.176, 126.877, 380.13, 426.927, 129.379, 383.383, 425.425, 128.128, 381.882, 436.686, 134.134, 389.389, 433.934, 132.382, 386.386, 432.682, 132.132, 386.386, 441.191, 136.136, 392.893, 437.938, 134.384, 389.389, 441.191, 136.887, 394.644, 431.932, 133.133, 389.139, 429.93, 130.881, 384.885, 441.691, 136.386, 393.393, 442.943, 136.637, 393.393, 443.693, 137.137, 394.394, 446.696, 138.138, 396.396, 440.19, 143.393, 421.171, 458.458, 143.644, 406.907, 455.705, 142.142, 404.404, 449.199, 143.894, 413.914, 457.207, 143.894, 407.657, 452.452, 143.393, 408.909, 447.948, 141.141, 404.404, 458.458, 142.893, 405.906, 456.957, 142.142, 404.404, 444.945, 137.137, 394.394, 447.948, 138.138, 396.396, 420.42, 136.887, 415.916, 422.422, 137.888, 417.667, 429.93, 141.892, 425.425, 433.683, 142.142, 423.673, 425.425, 138.889, 419.419, 422.422, 138.138, 418.919, 428.929, 141.642, 425.425, 438.438, 146.396, 434.684, 438.438, 146.897, 435.936, 438.939, 147.147, 436.436, 440.19, 147.397, 436.436, 466.466, 147.147, 414.164, 466.466, 146.396, 412.913, 465.966, 146.146, 412.412, 464.714, 146.146, 412.412, 440.941, 147.898, 437.437, 442.192, 147.898, 437.437, 447.197, 150.15, 441.441, 447.948, 150.651, 442.442, 449.199, 150.901, 442.442, 468.468, 148.899, 418.168, 468.468, 148.398, 416.917, 467.467, 148.148, 416.166, 467.467, 147.397, 414.915, 463.964, 145.646, 411.411, 462.712, 145.646, 411.411, 456.206, 153.654, 446.446, 458.959, 154.404, 447.447, 472.472, 151.401, 422.923, 467.467, 152.903, 431.932, 467.467, 150.4, 422.422, 459.96, 147.147, 416.416, 456.957, 154.154, 447.447, 436.436, 145.145, 431.681, 436.436, 145.395, 432.933, 437.687, 144.144, 427.677, 472.472, 150.901, 421.922, 445.946, 150.15, 441.441, 452.953, 152.903, 446.446, 477.477, 153.904, 427.928, 477.477, 153.403, 426.927, 475.976, 152.653, 425.425, 474.724, 152.653, 425.425, 475.225, 154.154, 430.18, 462.212, 155.656, 449.449, 471.972, 154.905, 436.186, 460.961, 155.405, 449.449, 466.716, 158.158, 453.954, 477.727, 154.154, 428.428, 472.722, 159.91, 455.205, 476.726, 160.16, 452.202, 476.726, 160.661, 454.204, 489.489, 159.91, 439.189, 489.489, 159.409, 437.938, 487.988, 158.659, 436.436, 486.736, 158.408, 436.436, 482.732, 156.657, 433.433, 480.981, 157.157, 435.936, 483.984, 156.907, 433.433, 482.232, 159.159, 441.942, 490.991, 160.661, 440.44, 470.47, 159.66, 456.706, 470.47, 159.91, 457.457, 471.221, 160.16, 457.457, 472.722, 160.911, 458.959, 469.719, 159.409, 455.956, 470.22, 158.158, 451.701, 467.968, 158.659, 455.455, 469.219, 159.159, 455.455, 469.719, 157.908, 450.951, 500.75, 165.916, 449.449, 491.992, 160.911, 440.44, 498.248, 165.916, 452.452, 487.988, 163.163, 453.203, 494.244, 163.914, 449.449, 503.253, 166.917, 450.951, 501.751, 166.166, 449.449, 503.253, 167.167, 452.202, 473.473, 161.411, 460.21, 473.473, 161.411, 460.961, 475.475, 162.412, 462.712, 480.48, 165.415, 468.718, 485.485, 165.165, 463.964, 488.488, 164.164, 456.957, 480.48, 165.666, 469.97, 483.483, 167.167, 472.973, 504.754, 167.918, 453.453, 492.993, 167.167, 464.214, 486.987, 165.916, 464.464, 494.244, 167.167, 461.461, 475.475, 162.913, 463.964, 485.485, 168.669, 475.725, 485.485, 169.169, 476.977, 486.486, 169.67, 477.727, 506.006, 168.418, 453.453, 490.24, 167.918, 469.97, 486.236, 168.168, 474.474, 490.24, 168.669, 472.973, 502.252, 168.168, 457.958, 486.486, 170.17, 478.979, 487.487, 170.671, 479.729, 488.989, 169.67, 477.227, 494.244, 168.919, 469.97, 505.255, 168.168, 454.454, 534.284, 180.931, 478.228, 534.284, 180.681, 476.977, 533.283, 180.43, 476.226, 533.283, 180.18, 474.975, 532.282, 179.68, 474.224, 532.282, 179.429, 472.973, 531.281, 179.179, 472.222, 530.28, 174.925, 462.212, 530.28, 174.424, 460.961, 529.279, 174.174, 460.21, 519.519, 172.172, 453.453, 518.768, 171.672, 452.452, 517.517, 171.421, 452.452, 508.008, 168.919, 452.452, 506.256, 168.168, 452.452, 487.487, 171.421, 480.981, 488.488, 171.922, 481.982, 536.286, 181.431, 480.48, 505.505, 174.925, 481.231, 530.28, 180.681, 480.48, 530.03, 179.429, 474.224, 492.742, 170.921, 477.978, 515.265, 173.173, 462.963, 512.262, 173.423, 468.969, 521.271, 177.427, 474.975, 500.5, 173.423, 479.479, 503.503, 173.423, 477.978, 536.286, 181.431, 479.98, 483.483, 167.668, 473.974, 523.523, 172.673, 454.454, 522.772, 172.172, 453.453, 529.279, 173.924, 458.959, 524.774, 172.673, 454.454, 523.523, 174.174, 459.709, 516.766, 170.921, 451.451, 508.258, 168.919, 451.451, 512.512, 170.42, 451.451, 513.513, 170.921, 452.452, 523.523, 174.174, 459.709, 531.281, 174.925, 462.963, 531.031, 177.678, 467.717, 531.281, 177.678, 468.218, 528.778, 176.927, 465.966, 527.277, 174.424, 459.96, 521.271, 174.675, 462.963, 519.769, 173.674, 458.458, 515.265, 172.422, 458.458, 516.766, 172.422, 455.455, 538.538, 181.682, 484.484, 538.288, 181.682, 482.983, 536.286, 181.431, 481.231, 489.489, 174.424, 485.986, 492.492, 174.424, 485.735, 506.756, 176.426, 485.235, 533.783, 181.682, 484.484, 525.775, 179.93, 482.232, 519.769, 178.428, 482.732, 504.504, 175.676, 484.234, 493.994, 174.424, 485.485, 524.274, 179.93, 483.984, 534.784, 181.682, 482.482, 488.488, 173.674, 484.985, 539.289, 181.932, 486.236, 539.289, 181.682, 484.985, 540.29, 182.683, 491.992, 540.29, 181.932, 486.987, 489.489, 177.678, 491.992, 501.001, 177.928, 491.992, 532.032, 182.432, 491.992, 519.769, 179.93, 488.488, 498.748, 177.177, 489.99, 495.745, 176.677, 489.99, 487.487, 181.682, 499.249, 486.486, 181.932, 499.499, 486.236, 182.432, 500.25, 486.236, 184.434, 504.254, 542.292, 183.934, 497.247, 542.292, 183.433, 495.996, 541.291, 183.433, 495.245, 488.488, 180.43, 497.247, 487.487, 180.681, 497.497, 541.291, 182.683, 492.993, 489.489, 178.428, 493.243, 488.488, 178.428, 493.493, 532.032, 182.432, 491.992, 505.755, 178.679, 492.742, 499.249, 178.178, 492.993, 496.746, 179.429, 496.246, 503.503, 179.429, 495.495, 513.513, 180.18, 494.494, 530.28, 182.432, 492.993, 542.292, 186.687, 505.755, 541.541, 183.934, 497.747, 542.542, 186.687, 505.255, 543.293, 186.687, 505.255, 543.293, 184.184, 497.998, 495.245, 182.933, 504.504, 504.254, 182.683, 504.754, 520.52, 183.934, 505.255, 537.036, 186.436, 505.755, 531.781, 183.684, 498.999, 497.247, 180.18, 497.247, 534.784, 184.184, 498.748, 524.274, 184.184, 503.253, 527.277, 183.183, 498.748, 484.234, 186.436, 507.257, 483.483, 186.687, 507.257, 483.233, 187.187, 508.258, 482.482, 187.437, 508.258, 482.232, 187.938, 509.259, 479.229, 190.941, 514.264, 478.478, 191.441, 514.264, 478.228, 191.692, 515.265, 485.485, 185.435, 506.006, 484.484, 185.936, 506.256, 480.48, 190.19, 513.013, 479.479, 190.691, 513.263, 485.485, 184.685, 504.254, 526.026, 194.444, 541.541, 542.292, 188.939, 512.012, 501.251, 187.688, 519.769, 511.761, 190.19, 529.029, 533.783, 192.442, 527.527, 538.788, 190.691, 518.518, 495.996, 183.684, 506.256, 509.259, 185.686, 513.763, 521.271, 190.941, 528.778, 521.271, 188.689, 519.769, 510.76, 188.689, 522.772, 516.766, 188.438, 521.271, 498.748, 186.186, 514.014, 518.518, 187.688, 518.268, 491.491, 185.435, 509.259, 481.481, 188.188, 509.259, 481.481, 188.939, 511.011, 463.463, 204.705, 547.547, 463.463, 205.205, 548.798, 464.464, 204.955, 549.549, 480.48, 189.439, 511.261, 476.476, 192.442, 515.265, 476.226, 192.943, 516.266, 469.469, 204.955, 556.556, 469.469, 205.205, 557.807, 470.971, 204.454, 558.308, 544.294, 191.441, 520.02, 544.294, 190.691, 517.767, 543.293, 190.44, 517.017, 538.538, 192.943, 527.027, 537.287, 192.442, 525.775, 459.459, 204.204, 541.791, 459.459, 204.454, 542.792, 461.461, 204.454, 544.544, 472.222, 195.946, 522.522, 464.214, 201.702, 539.539, 473.723, 195.445, 523.023, 464.464, 200.951, 536.286, 461.461, 204.705, 545.795, 467.467, 205.205, 553.553, 467.467, 205.455, 554.804, 464.464, 205.455, 550.8, 543.293, 189.189, 512.762, 463.713, 202.202, 540.79, 474.975, 194.695, 522.022, 479.729, 190.941, 514.264, 473.223, 195.946, 524.524, 464.214, 201.702, 539.539, 467.467, 204.955, 553.553, 474.474, 202.202, 557.307, 483.233, 198.448, 554.554, 492.242, 195.946, 551.801, 497.497, 194.945, 550.3, 508.258, 193.944, 547.047, 520.77, 193.944, 543.293, 486.987, 195.696, 543.793, 486.987, 190.44, 521.521, 477.978, 199.199, 548.298, 502.002, 191.692, 534.784, 486.987, 192.943, 530.28, 479.479, 193.443, 524.274, 492.993, 191.942, 531.781, 485.485, 188.689, 513.763, 488.238, 188.188, 515.265, 510.76, 192.442, 537.787, 502.002, 190.44, 528.778, 482.232, 189.439, 514.014, 471.972, 202.202, 551.301, 467.467, 202.452, 545.295, 470.47, 199.7, 539.289, 479.479, 195.445, 533.283, 501.751, 193.193, 540.79, 494.494, 193.694, 540.79, 518.268, 193.193, 539.289, 506.506, 192.192, 537.787, 491.241, 189.439, 521.271, 545.795, 191.942, 521.271, 541.791, 192.943, 525.525, 473.974, 193.944, 516.266, 471.721, 195.696, 520.27, 462.212, 201.702, 536.786, 453.203, 201.201, 515.265, 452.452, 201.201, 515.265, 452.202, 201.451, 516.266, 451.451, 201.702, 516.266, 451.201, 201.952, 517.267, 450.45, 202.202, 517.267, 450.2, 202.452, 518.268, 454.454, 200.701, 514.014, 453.453, 200.951, 514.264, 456.206, 200.2, 513.263, 454.454, 200.45, 513.263, 449.449, 202.703, 518.268, 449.449, 203.203, 520.02, 449.449, 205.455, 529.529, 449.449, 205.706, 530.78, 450.45, 205.205, 531.531, 453.203, 201.201, 516.266, 450.45, 205.455, 532.782, 453.453, 204.454, 535.535, 470.971, 194.695, 513.263, 469.719, 195.445, 513.263, 453.453, 204.705, 536.786, 456.957, 204.454, 540.29, 458.208, 203.954, 540.29, 461.461, 198.949, 513.263, 453.954, 204.204, 535.285, 462.963, 198.949, 518.268, 456.957, 200.701, 517.017, 452.452, 202.452, 521.271, 453.954, 203.453, 528.778, 470.47, 195.195, 515.265, 465.966, 197.698, 516.766, 454.704, 203.954, 536.036, 448.448, 203.453, 520.27, 448.448, 205.956, 528.778, 468.969, 195.445, 512.262, 456.456, 200.2, 512.262, 466.216, 196.947, 512.262, 459.209, 199.449, 512.262, 541.291, 205.706, 602.602, 542.292, 205.706, 602.352, 542.292, 205.205, 601.601, 550.3, 202.452, 597.597, 551.301, 202.202, 597.347, 551.301, 201.952, 596.596, 574.324, 202.953, 590.59, 575.325, 203.203, 590.34, 575.325, 203.203, 589.589, 576.326, 203.704, 589.339, 576.326, 203.704, 588.588, 577.327, 203.954, 588.338, 577.327, 203.954, 587.587, 578.328, 204.454, 587.337, 578.328, 204.454, 586.586, 579.329, 204.705, 586.336, 579.329, 204.705, 585.585, 580.33, 205.205, 585.335, 580.33, 205.205, 584.584, 581.331, 205.455, 584.334, 581.331, 205.455, 583.583, 582.332, 205.956, 583.333, 582.332, 205.956, 582.582, 583.333, 206.206, 582.332, 583.333, 206.206, 581.581, 584.334, 206.707, 581.331, 584.334, 206.456, 580.58, 587.337, 207.457, 578.578, 588.338, 207.958, 578.328, 588.338, 207.708, 577.577, 589.339, 208.208, 577.327, 589.339, 207.958, 576.576, 591.341, 208.208, 573.573, 592.342, 208.458, 573.323, 592.342, 208.208, 572.572, 593.343, 208.458, 572.322, 593.343, 208.208, 571.571, 594.344, 208.458, 571.321, 594.344, 208.208, 570.57, 537.287, 207.207, 606.606, 538.288, 207.207, 606.356, 538.538, 206.957, 605.355, 533.533, 206.957, 607.357, 543.293, 205.205, 601.351, 543.543, 204.705, 600.35, 552.302, 201.702, 596.346, 552.552, 201.451, 595.345, 585.335, 206.957, 580.33, 585.585, 206.957, 579.329, 590.34, 208.458, 576.326, 590.59, 208.208, 575.325, 595.345, 208.458, 570.32, 595.595, 208.208, 569.319, 600.35, 208.458, 565.565, 601.351, 208.709, 565.315, 601.601, 208.458, 564.314, 602.352, 208.208, 562.562, 603.353, 208.458, 562.312, 603.603, 208.208, 561.311, 604.354, 206.206, 554.554, 604.104, 206.707, 557.307, 540.29, 206.957, 605.355, 540.29, 206.707, 604.604, 548.548, 202.953, 598.348, 550.3, 202.703, 598.348, 587.337, 207.708, 579.329, 591.341, 208.458, 575.325, 597.347, 208.709, 569.319, 597.347, 208.458, 568.568, 598.598, 208.208, 566.316, 600.35, 208.709, 566.316, 602.352, 208.709, 564.314, 501.001, 202.703, 596.346, 501.751, 202.703, 597.347, 503.003, 202.703, 597.347, 503.753, 202.703, 598.348, 505.005, 202.703, 598.348, 509.009, 202.202, 599.349, 509.759, 202.452, 600.35, 511.011, 202.202, 600.35, 523.023, 203.704, 605.355, 523.773, 204.204, 606.356, 525.025, 204.454, 606.356, 541.291, 206.456, 604.354, 546.546, 203.954, 599.349, 548.298, 203.453, 599.349, 605.355, 206.206, 554.304, 605.355, 205.706, 552.552, 605.355, 203.203, 546.046, 605.355, 202.703, 544.794, 604.354, 202.452, 544.044, 604.354, 201.952, 542.792, 603.353, 201.451, 542.042, 596.596, 197.197, 533.283, 595.845, 196.697, 532.282, 594.594, 196.697, 532.282, 554.554, 193.944, 527.277, 553.803, 193.694, 526.276, 552.552, 193.694, 526.276, 549.549, 194.695, 530.03, 540.04, 194.695, 533.533, 598.348, 208.709, 568.318, 571.571, 201.952, 591.341, 574.324, 202.953, 591.341, 525.775, 204.955, 607.357, 528.028, 205.455, 607.357, 546.296, 204.204, 600.35, 603.353, 200.701, 539.789, 602.352, 200.2, 539.039, 588.588, 195.946, 531.281, 587.837, 195.445, 530.28, 585.585, 195.445, 530.28, 548.548, 192.442, 523.273, 546.796, 191.692, 521.271, 512.762, 202.703, 602.352, 514.014, 202.452, 602.352, 599.349, 207.708, 565.065, 537.287, 207.457, 607.357, 537.036, 206.707, 605.355, 505.755, 202.703, 599.349, 519.019, 202.953, 604.354, 519.769, 203.203, 605.355, 563.563, 199.95, 593.343, 567.317, 200.701, 593.343, 567.567, 200.701, 592.342, 571.321, 201.952, 592.342, 568.568, 195.445, 530.28, 567.817, 195.195, 529.279, 564.564, 195.195, 529.279, 492.492, 200.45, 586.836, 492.492, 200.701, 587.837, 495.495, 201.451, 590.59, 528.778, 206.206, 608.358, 533.283, 207.207, 608.358, 548.298, 202.703, 596.846, 538.538, 204.955, 600.1, 533.033, 204.955, 602.102, 535.535, 205.455, 602.352, 549.799, 192.442, 523.273, 557.307, 200.45, 595.345, 557.557, 200.2, 594.344, 563.813, 194.945, 528.278, 559.559, 194.695, 528.278, 558.808, 194.194, 527.277, 564.564, 199.95, 592.842, 560.31, 199.7, 593.843, 561.811, 199.7, 593.593, 515.765, 202.953, 604.354, 539.289, 205.706, 602.352, 606.356, 205.706, 552.302, 606.356, 203.704, 546.796, 563.313, 199.95, 594.344, 561.311, 199.7, 593.843, 593.843, 196.196, 531.281, 604.354, 208.458, 561.311, 495.495, 201.952, 591.841, 500, 202.703, 596.346, 602.352, 199.7, 537.787, 597.847, 197.447, 533.283, 517.767, 202.452, 603.103, 515.515, 201.952, 600.85, 570.07, 195.445, 530.28, 592.092, 196.947, 533.783, 604.354, 205.455, 553.303, 546.046, 195.946, 536.286, 561.561, 195.946, 532.282, 584.834, 195.195, 529.279, 570.32, 195.195, 529.279, 502.252, 197.197, 573.823, 495.745, 198.949, 582.582, 557.807, 199.95, 592.592, 563.062, 199.95, 589.589, 584.834, 206.707, 577.327, 584.834, 203.954, 561.061, 564.814, 201.952, 563.313, 552.802, 200.701, 587.337, 542.292, 200.45, 569.319, 536.286, 202.202, 590.34, 563.313, 201.952, 576.826, 519.769, 198.448, 578.328, 566.316, 198.949, 543.793, 575.325, 203.704, 570.82, 572.322, 203.203, 576.826, 510.76, 198.198, 581.331, 546.796, 201.201, 576.826, 548.298, 199.199, 552.802, 545.295, 201.952, 588.838, 557.307, 200.701, 582.832, 522.772, 197.197, 561.811, 524.274, 202.452, 599.349, 542.292, 202.703, 593.343, 511.011, 196.947, 570.82, 502.002, 198.949, 584.334, 578.328, 204.204, 567.817, 539.289, 200.951, 579.829, 584.334, 205.706, 570.82, 560.31, 201.451, 576.826, 519.769, 195.946, 554.304, 519.769, 200.701, 593.343, 561.811, 201.952, 572.322, 528.778, 202.452, 594.844, 524.274, 200.2, 587.337, 552.802, 201.201, 581.331, 548.298, 201.201, 584.334, 543.793, 201.451, 581.331, 530.28, 200.2, 579.829, 569.319, 202.452, 581.331, 563.313, 201.201, 581.331, 569.319, 196.947, 534.784, 575.325, 201.201, 552.802, 572.322, 201.702, 555.805, 554.304, 200.45, 591.841, 569.319, 202.202, 563.313, 519.769, 202.452, 602.352, 563.313, 200.701, 554.304, 509.259, 196.446, 566.316, 552.802, 201.201, 575.325, 551.301, 201.201, 569.319, 507.757, 198.949, 585.835, 530.28, 203.203, 597.847, 581.331, 205.455, 576.826, 567.817, 200.951, 588.838, 588.838, 200.45, 543.793, 597.847, 203.203, 549.799, 584.334, 198.949, 540.79, 584.334, 202.703, 554.304, 587.337, 198.448, 537.787, 593.343, 198.949, 537.787, 588.838, 203.704, 555.805, 597.847, 204.955, 555.805, 600.85, 202.452, 545.295, 602.352, 203.954, 549.799, 594.844, 206.206, 561.811, 590.34, 198.448, 537.787, 591.841, 204.705, 558.808, 472.472, 203.954, 559.559, 472.472, 204.204, 561.811, 473.473, 203.704, 562.562, 478.478, 200.951, 568.568, 478.478, 200.951, 569.819, 480.48, 199.95, 571.571, 480.48, 199.95, 572.822, 482.482, 199.449, 574.574, 482.482, 199.449, 575.825, 486.486, 199.449, 579.579, 473.473, 203.704, 563.813, 486.486, 199.449, 580.83, 483.733, 199.199, 576.076, 483.233, 199.199, 575.325, 519.269, 193.944, 544.044, 510.51, 193.944, 546.796, 496.746, 195.195, 551.551, 484.484, 198.198, 555.555, 477.477, 200.951, 557.807, 486.987, 198.448, 566.316, 494.494, 197.447, 570.82, 508.008, 195.445, 555.805, 482.482, 199.449, 567.817, 495.996, 196.697, 561.811, 501.751, 195.696, 558.808, 489.99, 197.197, 558.808, 483.984, 198.949, 560.31, 515.515, 194.695, 549.799)
polygons = [PackedInt32Array(2, 1, 0), PackedInt32Array(4, 3, 5), PackedInt32Array(5, 3, 6), PackedInt32Array(7, 6, 8), PackedInt32Array(10, 9, 11), PackedInt32Array(13, 12, 14), PackedInt32Array(14, 12, 15), PackedInt32Array(18, 17, 16), PackedInt32Array(21, 20, 19), PackedInt32Array(24, 23, 22), PackedInt32Array(27, 26, 25), PackedInt32Array(30, 29, 28), PackedInt32Array(33, 32, 31), PackedInt32Array(34, 38, 35), PackedInt32Array(35, 38, 36), PackedInt32Array(36, 38, 37), PackedInt32Array(9, 39, 8), PackedInt32Array(40, 34, 41), PackedInt32Array(41, 34, 35), PackedInt32Array(42, 19, 43), PackedInt32Array(45, 44, 46), PackedInt32Array(46, 44, 50), PackedInt32Array(50, 44, 49), PackedInt32Array(50, 49, 51), PackedInt32Array(51, 49, 48), PackedInt32Array(51, 48, 47), PackedInt32Array(51, 47, 52), PackedInt32Array(52, 47, 27), PackedInt32Array(55, 54, 53), PackedInt32Array(57, 56, 21), PackedInt32Array(60, 59, 58), PackedInt32Array(62, 61, 60), PackedInt32Array(55, 64, 18), PackedInt32Array(18, 64, 65), PackedInt32Array(65, 64, 63), PackedInt32Array(22, 66, 11), PackedInt32Array(33, 68, 67), PackedInt32Array(67, 68, 69), PackedInt32Array(69, 68, 15), PackedInt32Array(16, 70, 55), PackedInt32Array(31, 72, 71), PackedInt32Array(74, 73, 24), PackedInt32Array(76, 75, 42), PackedInt32Array(42, 75, 19), PackedInt32Array(58, 77, 57), PackedInt32Array(3, 78, 62), PackedInt32Array(37, 79, 36), PackedInt32Array(82, 81, 80), PackedInt32Array(8, 6, 9), PackedInt32Array(9, 6, 83), PackedInt32Array(83, 6, 27), PackedInt32Array(28, 84, 82), PackedInt32Array(86, 85, 87), PackedInt32Array(87, 85, 88), PackedInt32Array(90, 89, 91), PackedInt32Array(91, 89, 88), PackedInt32Array(53, 92, 46), PackedInt32Array(11, 9, 22), PackedInt32Array(22, 9, 83), PackedInt32Array(22, 83, 25), PackedInt32Array(25, 83, 27), PackedInt32Array(80, 93, 37), PackedInt32Array(96, 95, 94), PackedInt32Array(47, 123, 27), PackedInt32Array(27, 123, 99), PackedInt32Array(99, 113, 100), PackedInt32Array(100, 127, 30), PackedInt32Array(30, 124, 101), PackedInt32Array(101, 126, 102), PackedInt32Array(102, 107, 103), PackedInt32Array(103, 119, 104), PackedInt32Array(104, 118, 96), PackedInt32Array(96, 118, 97), PackedInt32Array(97, 118, 105), PackedInt32Array(105, 108, 106), PackedInt32Array(106, 121, 98), PackedInt32Array(98, 121, 44), PackedInt32Array(44, 121, 49), PackedInt32Array(49, 122, 48), PackedInt32Array(48, 112, 47), PackedInt32Array(47, 112, 123), PackedInt32Array(123, 112, 99), PackedInt32Array(113, 115, 100), PackedInt32Array(99, 109, 113), PackedInt32Array(127, 124, 30), PackedInt32Array(100, 114, 127), PackedInt32Array(124, 126, 101), PackedInt32Array(126, 107, 102), PackedInt32Array(107, 111, 103), PackedInt32Array(119, 118, 104), PackedInt32Array(103, 111, 119), PackedInt32Array(118, 111, 105), PackedInt32Array(108, 122, 106), PackedInt32Array(105, 111, 108), PackedInt32Array(106, 120, 121), PackedInt32Array(121, 122, 49), PackedInt32Array(122, 108, 48), PackedInt32Array(48, 110, 112), PackedInt32Array(112, 109, 99), PackedInt32Array(115, 114, 100), PackedInt32Array(113, 109, 115), PackedInt32Array(127, 114, 124), PackedInt32Array(124, 125, 126), PackedInt32Array(126, 125, 107), PackedInt32Array(107, 117, 111), PackedInt32Array(119, 111, 118), PackedInt32Array(122, 120, 106), PackedInt32Array(111, 117, 108), PackedInt32Array(120, 122, 121), PackedInt32Array(108, 110, 48), PackedInt32Array(110, 109, 112), PackedInt32Array(115, 125, 114), PackedInt32Array(109, 110, 115), PackedInt32Array(114, 125, 124), PackedInt32Array(125, 116, 107), PackedInt32Array(107, 116, 117), PackedInt32Array(117, 110, 108), PackedInt32Array(115, 116, 125), PackedInt32Array(110, 116, 115), PackedInt32Array(116, 110, 117), PackedInt32Array(57, 21, 19), PackedInt32Array(33, 128, 68), PackedInt32Array(68, 128, 15), PackedInt32Array(15, 128, 14), PackedInt32Array(46, 50, 55), PackedInt32Array(55, 51, 64), PackedInt32Array(64, 130, 63), PackedInt32Array(63, 130, 129), PackedInt32Array(129, 130, 58), PackedInt32Array(58, 130, 3), PackedInt32Array(3, 52, 27), PackedInt32Array(52, 130, 51), PackedInt32Array(51, 55, 50), PackedInt32Array(51, 130, 64), PackedInt32Array(130, 52, 3), PackedInt32Array(55, 18, 16), PackedInt32Array(71, 33, 31), PackedInt32Array(24, 22, 74), PackedInt32Array(74, 22, 25), PackedInt32Array(94, 131, 2), PackedInt32Array(3, 62, 60), PackedInt32Array(55, 53, 46), PackedInt32Array(36, 132, 35), PackedInt32Array(80, 28, 82), PackedInt32Array(27, 6, 3), PackedInt32Array(0, 133, 2), PackedInt32Array(2, 133, 94), PackedInt32Array(94, 133, 96), PackedInt32Array(63, 129, 134), PackedInt32Array(134, 129, 75), PackedInt32Array(75, 129, 19), PackedInt32Array(19, 129, 57), PackedInt32Array(57, 129, 58), PackedInt32Array(133, 104, 96), PackedInt32Array(104, 133, 103), PackedInt32Array(103, 14, 102), PackedInt32Array(102, 33, 101), PackedInt32Array(101, 71, 30), PackedInt32Array(71, 101, 33), PackedInt32Array(33, 102, 128), PackedInt32Array(128, 102, 14), PackedInt32Array(14, 135, 0), PackedInt32Array(0, 103, 133), PackedInt32Array(103, 135, 14), PackedInt32Array(135, 103, 0), PackedInt32Array(91, 88, 85), PackedInt32Array(136, 30, 137), PackedInt32Array(137, 30, 71), PackedInt32Array(3, 60, 58), PackedInt32Array(63, 91, 65), PackedInt32Array(65, 91, 85), PackedInt32Array(65, 85, 18), PackedInt32Array(30, 28, 100), PackedInt32Array(100, 28, 80), PackedInt32Array(100, 80, 37), PackedInt32Array(100, 37, 38), PackedInt32Array(100, 38, 99), PackedInt32Array(99, 38, 34), PackedInt32Array(99, 34, 27), PackedInt32Array(140, 139, 138), PackedInt32Array(98, 141, 140), PackedInt32Array(142, 97, 143), PackedInt32Array(143, 97, 148), PackedInt32Array(148, 97, 149), PackedInt32Array(149, 97, 147), PackedInt32Array(149, 147, 150), PackedInt32Array(150, 147, 146), PackedInt32Array(150, 146, 151), PackedInt32Array(151, 146, 145), PackedInt32Array(151, 145, 138), PackedInt32Array(151, 138, 144), PackedInt32Array(140, 138, 98), PackedInt32Array(98, 138, 145), PackedInt32Array(98, 145, 146), PackedInt32Array(98, 146, 106), PackedInt32Array(106, 146, 147), PackedInt32Array(106, 147, 105), PackedInt32Array(105, 147, 97), PackedInt32Array(154, 153, 152), PackedInt32Array(157, 156, 155), PackedInt32Array(159, 158, 157), PackedInt32Array(162, 161, 160), PackedInt32Array(164, 163, 162), PackedInt32Array(166, 165, 164), PackedInt32Array(169, 168, 167), PackedInt32Array(172, 171, 170), PackedInt32Array(175, 174, 173), PackedInt32Array(178, 177, 176), PackedInt32Array(180, 179, 181), PackedInt32Array(181, 179, 185), PackedInt32Array(185, 179, 184), PackedInt32Array(185, 184, 186), PackedInt32Array(186, 184, 183), PackedInt32Array(186, 183, 182), PackedInt32Array(186, 182, 187), PackedInt32Array(187, 182, 176), PackedInt32Array(189, 188, 190), PackedInt32Array(190, 188, 155), PackedInt32Array(160, 192, 191), PackedInt32Array(194, 193, 169), PackedInt32Array(170, 195, 194), PackedInt32Array(197, 196, 175), PackedInt32Array(191, 198, 159), PackedInt32Array(201, 200, 199), PackedInt32Array(167, 202, 166), PackedInt32Array(162, 152, 178), PackedInt32Array(188, 203, 154), PackedInt32Array(173, 204, 172), PackedInt32Array(179, 205, 201), PackedInt32Array(194, 169, 167), PackedInt32Array(175, 173, 197), PackedInt32Array(197, 173, 172), PackedInt32Array(160, 191, 159), PackedInt32Array(188, 157, 155), PackedInt32Array(154, 152, 188), PackedInt32Array(188, 152, 206), PackedInt32Array(206, 152, 160), PackedInt32Array(160, 152, 162), PackedInt32Array(194, 167, 170), PackedInt32Array(170, 167, 166), PackedInt32Array(159, 157, 188), PackedInt32Array(182, 207, 176), PackedInt32Array(207, 182, 208), PackedInt32Array(208, 183, 209), PackedInt32Array(209, 201, 199), PackedInt32Array(201, 184, 179), PackedInt32Array(184, 210, 183), PackedInt32Array(183, 208, 182), PackedInt32Array(183, 210, 209), PackedInt32Array(209, 210, 201), PackedInt32Array(201, 210, 184), PackedInt32Array(143, 148, 211), PackedInt32Array(211, 148, 149), PackedInt32Array(211, 149, 212), PackedInt32Array(212, 149, 150), PackedInt32Array(212, 150, 213), PackedInt32Array(213, 150, 214), PackedInt32Array(214, 150, 151), PackedInt32Array(214, 151, 197), PackedInt32Array(197, 151, 144), PackedInt32Array(170, 218, 172), PackedInt32Array(172, 218, 215), PackedInt32Array(215, 218, 216), PackedInt32Array(216, 218, 217), PackedInt32Array(216, 217, 176), PackedInt32Array(166, 164, 170), PackedInt32Array(160, 159, 206), PackedInt32Array(206, 159, 188), PackedInt32Array(176, 217, 178), PackedInt32Array(178, 217, 162), PackedInt32Array(162, 217, 164), PackedInt32Array(164, 217, 218), PackedInt32Array(164, 218, 170), PackedInt32Array(172, 214, 197), PackedInt32Array(214, 235, 213), PackedInt32Array(213, 222, 212), PackedInt32Array(212, 223, 211), PackedInt32Array(211, 219, 143), PackedInt32Array(219, 211, 220), PackedInt32Array(220, 226, 221), PackedInt32Array(221, 236, 199), PackedInt32Array(199, 227, 209), PackedInt32Array(209, 225, 208), PackedInt32Array(208, 238, 207), PackedInt32Array(207, 233, 176), PackedInt32Array(176, 229, 216), PackedInt32Array(216, 228, 215), PackedInt32Array(215, 235, 172), PackedInt32Array(172, 235, 214), PackedInt32Array(235, 222, 213), PackedInt32Array(222, 224, 212), PackedInt32Array(223, 220, 211), PackedInt32Array(212, 232, 223), PackedInt32Array(226, 236, 221), PackedInt32Array(220, 223, 226), PackedInt32Array(236, 227, 199), PackedInt32Array(227, 237, 209), PackedInt32Array(225, 238, 208), PackedInt32Array(209, 237, 225), PackedInt32Array(238, 230, 207), PackedInt32Array(233, 229, 176), PackedInt32Array(207, 230, 233), PackedInt32Array(229, 228, 216), PackedInt32Array(228, 222, 215), PackedInt32Array(215, 222, 235), PackedInt32Array(224, 232, 212), PackedInt32Array(222, 228, 224), PackedInt32Array(232, 234, 223), PackedInt32Array(226, 234, 236), PackedInt32Array(223, 234, 226), PackedInt32Array(236, 234, 227), PackedInt32Array(227, 234, 237), PackedInt32Array(225, 224, 238), PackedInt32Array(237, 231, 225), PackedInt32Array(238, 224, 230), PackedInt32Array(233, 228, 229), PackedInt32Array(230, 224, 233), PackedInt32Array(224, 225, 232), PackedInt32Array(228, 233, 224), PackedInt32Array(232, 231, 234), PackedInt32Array(234, 231, 237), PackedInt32Array(231, 232, 225), PackedInt32Array(241, 240, 239), PackedInt32Array(244, 243, 242), PackedInt32Array(247, 246, 245), PackedInt32Array(249, 248, 241), PackedInt32Array(251, 250, 249), PackedInt32Array(253, 252, 247), PackedInt32Array(239, 249, 241), PackedInt32Array(245, 254, 244), PackedInt32Array(253, 247, 245), PackedInt32Array(249, 239, 251), PackedInt32Array(251, 239, 256), PackedInt32Array(251, 256, 255), PackedInt32Array(242, 257, 181), PackedInt32Array(259, 258, 251), PackedInt32Array(255, 263, 262), PackedInt32Array(262, 263, 261), PackedInt32Array(262, 261, 260), PackedInt32Array(253, 245, 244), PackedInt32Array(268, 273, 260), PackedInt32Array(260, 273, 262), PackedInt32Array(262, 273, 255), PackedInt32Array(255, 272, 251), PackedInt32Array(251, 264, 259), PackedInt32Array(264, 269, 265), PackedInt32Array(265, 269, 266), PackedInt32Array(266, 242, 181), PackedInt32Array(242, 266, 267), PackedInt32Array(267, 274, 268), PackedInt32Array(268, 271, 273), PackedInt32Array(273, 272, 255), PackedInt32Array(272, 264, 251), PackedInt32Array(264, 272, 269), PackedInt32Array(269, 275, 266), PackedInt32Array(266, 274, 267), PackedInt32Array(274, 271, 268), PackedInt32Array(271, 270, 273), PackedInt32Array(273, 270, 272), PackedInt32Array(272, 270, 269), PackedInt32Array(275, 274, 266), PackedInt32Array(269, 270, 275), PackedInt32Array(274, 275, 271), PackedInt32Array(271, 275, 270), PackedInt32Array(242, 267, 244), PackedInt32Array(244, 267, 253), PackedInt32Array(253, 267, 276), PackedInt32Array(276, 267, 268), PackedInt32Array(276, 268, 277), PackedInt32Array(277, 268, 260), PackedInt32Array(181, 185, 266), PackedInt32Array(266, 185, 186), PackedInt32Array(266, 186, 265), PackedInt32Array(265, 186, 264), PackedInt32Array(264, 186, 187), PackedInt32Array(264, 187, 259), PackedInt32Array(259, 187, 176), PackedInt32Array(280, 279, 278), PackedInt32Array(282, 281, 280), PackedInt32Array(278, 283, 253), PackedInt32Array(260, 284, 277), PackedInt32Array(277, 284, 287), PackedInt32Array(277, 287, 286), PackedInt32Array(277, 286, 276), PackedInt32Array(276, 286, 253), PackedInt32Array(253, 286, 278), PackedInt32Array(278, 286, 280), PackedInt32Array(280, 286, 285), PackedInt32Array(280, 285, 282), PackedInt32Array(285, 288, 282), PackedInt32Array(288, 286, 290), PackedInt32Array(290, 292, 289), PackedInt32Array(289, 293, 291), PackedInt32Array(291, 293, 284), PackedInt32Array(284, 293, 287), PackedInt32Array(287, 290, 286), PackedInt32Array(286, 288, 285), PackedInt32Array(292, 293, 289), PackedInt32Array(290, 287, 292), PackedInt32Array(293, 292, 287), PackedInt32Array(296, 295, 294), PackedInt32Array(294, 298, 297), PackedInt32Array(296, 294, 300), PackedInt32Array(300, 294, 297), PackedInt32Array(300, 297, 299), PackedInt32Array(300, 299, 288), PackedInt32Array(296, 301, 289), PackedInt32Array(289, 301, 290), PackedInt32Array(290, 300, 288), PackedInt32Array(300, 301, 296), PackedInt32Array(301, 300, 290), PackedInt32Array(299, 297, 302), PackedInt32Array(303, 304, 302), PackedInt32Array(302, 304, 299), PackedInt32Array(307, 310, 308), PackedInt32Array(308, 312, 305), PackedInt32Array(305, 299, 304), PackedInt32Array(299, 312, 306), PackedInt32Array(306, 312, 309), PackedInt32Array(309, 311, 310), PackedInt32Array(310, 311, 308), PackedInt32Array(312, 299, 305), PackedInt32Array(308, 311, 312), PackedInt32Array(312, 311, 309), PackedInt32Array(313, 307, 314), PackedInt32Array(314, 307, 308), PackedInt32Array(304, 315, 305), PackedInt32Array(305, 316, 308), PackedInt32Array(281, 282, 317), PackedInt32Array(317, 282, 318), PackedInt32Array(306, 288, 299), PackedInt32Array(288, 321, 282), PackedInt32Array(282, 321, 318), PackedInt32Array(318, 321, 319), PackedInt32Array(319, 321, 320), PackedInt32Array(320, 288, 306), PackedInt32Array(288, 320, 321), PackedInt32Array(323, 322, 319), PackedInt32Array(319, 322, 318), PackedInt32Array(325, 324, 326), PackedInt32Array(326, 324, 327), PackedInt32Array(329, 328, 330), PackedInt32Array(330, 328, 331), PackedInt32Array(333, 332, 327), PackedInt32Array(336, 335, 334), PackedInt32Array(339, 338, 337), PackedInt32Array(328, 340, 339), PackedInt32Array(341, 331, 342), PackedInt32Array(342, 331, 339), PackedInt32Array(342, 339, 337), PackedInt32Array(343, 336, 344), PackedInt32Array(344, 336, 333), PackedInt32Array(333, 346, 344), PackedInt32Array(346, 347, 345), PackedInt32Array(345, 347, 337), PackedInt32Array(337, 348, 307), PackedInt32Array(307, 348, 310), PackedInt32Array(310, 348, 309), PackedInt32Array(309, 348, 306), PackedInt32Array(306, 348, 333), PackedInt32Array(333, 348, 346), PackedInt32Array(346, 348, 347), PackedInt32Array(347, 348, 337), PackedInt32Array(344, 349, 343), PackedInt32Array(324, 351, 350), PackedInt32Array(327, 324, 333), PackedInt32Array(333, 324, 350), PackedInt32Array(333, 350, 352), PackedInt32Array(333, 352, 306), PackedInt32Array(331, 328, 339), PackedInt32Array(337, 353, 345), PackedInt32Array(334, 354, 333), PackedInt32Array(306, 352, 320), PackedInt32Array(320, 352, 319), PackedInt32Array(319, 352, 350), PackedInt32Array(343, 355, 336), PackedInt32Array(307, 342, 337), PackedInt32Array(336, 334, 333), PackedInt32Array(357, 356, 358), PackedInt32Array(358, 356, 359), PackedInt32Array(359, 356, 360), PackedInt32Array(359, 360, 345), PackedInt32Array(345, 360, 346), PackedInt32Array(346, 360, 362), PackedInt32Array(346, 362, 361), PackedInt32Array(346, 361, 344), PackedInt32Array(361, 363, 344), PackedInt32Array(362, 364, 361), PackedInt32Array(356, 365, 360), PackedInt32Array(360, 365, 367), PackedInt32Array(360, 367, 366), PackedInt32Array(367, 368, 366), PackedInt32Array(370, 369, 371), PackedInt32Array(371, 369, 372), PackedInt32Array(373, 374, 365), PackedInt32Array(365, 374, 367), PackedInt32Array(367, 374, 373), PackedInt32Array(373, 375, 372), PackedInt32Array(373, 376, 367), PackedInt32Array(367, 376, 369), PackedInt32Array(369, 376, 372), PackedInt32Array(372, 376, 373), PackedInt32Array(369, 377, 367), PackedInt32Array(379, 378, 380), PackedInt32Array(380, 378, 366), PackedInt32Array(366, 381, 380), PackedInt32Array(378, 382, 366), PackedInt32Array(366, 382, 383), PackedInt32Array(366, 383, 362), PackedInt32Array(366, 362, 360), PackedInt32Array(384, 364, 385), PackedInt32Array(385, 364, 386), PackedInt32Array(386, 364, 362), PackedInt32Array(382, 385, 383), PackedInt32Array(383, 385, 386), PackedInt32Array(383, 386, 362), PackedInt32Array(390, 391, 389), PackedInt32Array(389, 391, 387), PackedInt32Array(387, 391, 388), PackedInt32Array(388, 391, 377), PackedInt32Array(377, 390, 367), PackedInt32Array(367, 390, 368), PackedInt32Array(390, 377, 391), PackedInt32Array(393, 392, 387), PackedInt32Array(387, 392, 394), PackedInt32Array(387, 394, 389), PackedInt32Array(397, 396, 395), PackedInt32Array(399, 400, 389), PackedInt32Array(389, 400, 395), PackedInt32Array(395, 400, 397), PackedInt32Array(397, 399, 398), PackedInt32Array(399, 397, 400), PackedInt32Array(394, 403, 389), PackedInt32Array(389, 406, 399), PackedInt32Array(399, 405, 398), PackedInt32Array(398, 402, 401), PackedInt32Array(402, 405, 404), PackedInt32Array(404, 406, 403), PackedInt32Array(403, 406, 389), PackedInt32Array(406, 405, 399), PackedInt32Array(405, 402, 398), PackedInt32Array(405, 406, 404), PackedInt32Array(397, 398, 407), PackedInt32Array(409, 408, 410), PackedInt32Array(410, 408, 413), PackedInt32Array(410, 413, 414), PackedInt32Array(414, 413, 412), PackedInt32Array(414, 412, 415), PackedInt32Array(415, 412, 403), PackedInt32Array(415, 403, 411), PackedInt32Array(416, 410, 417), PackedInt32Array(417, 410, 418), PackedInt32Array(418, 410, 414), PackedInt32Array(418, 414, 419), PackedInt32Array(419, 414, 415), PackedInt32Array(419, 415, 420), PackedInt32Array(420, 415, 411), PackedInt32Array(423, 422, 421), PackedInt32Array(425, 424, 423), PackedInt32Array(427, 426, 425), PackedInt32Array(430, 429, 428), PackedInt32Array(433, 432, 431), PackedInt32Array(411, 435, 434), PackedInt32Array(441, 443, 411), PackedInt32Array(411, 443, 420), PackedInt32Array(420, 444, 419), PackedInt32Array(419, 442, 418), PackedInt32Array(418, 437, 417), PackedInt32Array(417, 437, 436), PackedInt32Array(437, 446, 439), PackedInt32Array(439, 445, 440), PackedInt32Array(440, 421, 438), PackedInt32Array(421, 440, 441), PackedInt32Array(441, 445, 443), PackedInt32Array(443, 444, 420), PackedInt32Array(444, 447, 419), PackedInt32Array(442, 437, 418), PackedInt32Array(419, 446, 442), PackedInt32Array(446, 447, 439), PackedInt32Array(437, 442, 446), PackedInt32Array(445, 441, 440), PackedInt32Array(439, 444, 445), PackedInt32Array(445, 444, 443), PackedInt32Array(447, 446, 419), PackedInt32Array(444, 439, 447), PackedInt32Array(421, 448, 438), PackedInt32Array(449, 402, 408), PackedInt32Array(408, 402, 413), PackedInt32Array(413, 402, 412), PackedInt32Array(412, 402, 404), PackedInt32Array(412, 404, 403), PackedInt32Array(431, 451, 450), PackedInt32Array(452, 430, 453), PackedInt32Array(453, 430, 450), PackedInt32Array(423, 454, 425), PackedInt32Array(433, 458, 455), PackedInt32Array(455, 458, 457), PackedInt32Array(457, 458, 456), PackedInt32Array(456, 458, 434), PackedInt32Array(427, 425, 459), PackedInt32Array(427, 461, 462), PackedInt32Array(462, 461, 460), PackedInt32Array(460, 461, 428), PackedInt32Array(459, 463, 427), PackedInt32Array(427, 463, 461), PackedInt32Array(461, 463, 428), PackedInt32Array(428, 464, 430), PackedInt32Array(430, 464, 450), PackedInt32Array(450, 459, 431), PackedInt32Array(459, 464, 463), PackedInt32Array(463, 464, 428), PackedInt32Array(464, 459, 450), PackedInt32Array(421, 441, 423), PackedInt32Array(423, 441, 454), PackedInt32Array(454, 466, 431), PackedInt32Array(431, 468, 433), PackedInt32Array(433, 468, 458), PackedInt32Array(458, 467, 434), PackedInt32Array(434, 467, 411), PackedInt32Array(411, 467, 441), PackedInt32Array(441, 465, 454), PackedInt32Array(466, 468, 431), PackedInt32Array(454, 465, 466), PackedInt32Array(468, 467, 458), PackedInt32Array(467, 465, 441), PackedInt32Array(466, 467, 468), PackedInt32Array(465, 467, 466), PackedInt32Array(381, 366, 395), PackedInt32Array(395, 366, 368), PackedInt32Array(395, 368, 390), PackedInt32Array(395, 390, 389), PackedInt32Array(479, 473, 472), PackedInt32Array(473, 479, 474), PackedInt32Array(474, 480, 475), PackedInt32Array(475, 481, 469), PackedInt32Array(469, 481, 470), PackedInt32Array(470, 481, 471), PackedInt32Array(471, 481, 476), PackedInt32Array(476, 480, 477), PackedInt32Array(477, 474, 478), PackedInt32Array(478, 474, 479), PackedInt32Array(480, 476, 475), PackedInt32Array(474, 477, 480), PackedInt32Array(475, 476, 481), PackedInt32Array(482, 437, 472), PackedInt32Array(472, 437, 479), PackedInt32Array(479, 437, 478), PackedInt32Array(478, 437, 439), PackedInt32Array(478, 439, 477), PackedInt32Array(477, 439, 476), PackedInt32Array(476, 439, 440), PackedInt32Array(476, 440, 471), PackedInt32Array(471, 440, 438), PackedInt32Array(469, 484, 483), PackedInt32Array(483, 486, 485), PackedInt32Array(472, 473, 487), PackedInt32Array(487, 492, 488), PackedInt32Array(488, 490, 489), PackedInt32Array(489, 483, 485), PackedInt32Array(483, 475, 469), PackedInt32Array(475, 490, 474), PackedInt32Array(474, 491, 473), PackedInt32Array(473, 492, 487), PackedInt32Array(492, 491, 488), PackedInt32Array(490, 475, 489), PackedInt32Array(488, 474, 490), PackedInt32Array(489, 475, 483), PackedInt32Array(491, 492, 473), PackedInt32Array(474, 488, 491), PackedInt32Array(494, 493, 495), PackedInt32Array(495, 493, 496), PackedInt32Array(499, 498, 497), PackedInt32Array(493, 501, 500), PackedInt32Array(485, 502, 499), PackedInt32Array(504, 503, 500), PackedInt32Array(500, 503, 508), PackedInt32Array(508, 503, 507), PackedInt32Array(508, 507, 509), PackedInt32Array(509, 507, 506), PackedInt32Array(509, 506, 510), PackedInt32Array(510, 506, 511), PackedInt32Array(511, 506, 505), PackedInt32Array(511, 505, 485), PackedInt32Array(499, 497, 513), PackedInt32Array(513, 497, 512), PackedInt32Array(516, 515, 514), PackedInt32Array(499, 523, 485), PackedInt32Array(485, 523, 511), PackedInt32Array(511, 525, 510), PackedInt32Array(510, 518, 509), PackedInt32Array(509, 522, 508), PackedInt32Array(508, 522, 500), PackedInt32Array(500, 517, 493), PackedInt32Array(493, 517, 496), PackedInt32Array(517, 522, 518), PackedInt32Array(518, 510, 519), PackedInt32Array(519, 524, 520), PackedInt32Array(520, 513, 512), PackedInt32Array(513, 523, 499), PackedInt32Array(523, 521, 511), PackedInt32Array(525, 524, 510), PackedInt32Array(511, 521, 525), PackedInt32Array(518, 522, 509), PackedInt32Array(522, 517, 500), PackedInt32Array(510, 524, 519), PackedInt32Array(524, 521, 520), PackedInt32Array(520, 523, 513), PackedInt32Array(523, 520, 521), PackedInt32Array(525, 521, 524), PackedInt32Array(514, 512, 516), PackedInt32Array(516, 512, 497), PackedInt32Array(489, 506, 488), PackedInt32Array(488, 506, 507), PackedInt32Array(488, 507, 487), PackedInt32Array(487, 507, 503), PackedInt32Array(528, 527, 526), PackedInt32Array(530, 529, 528), PackedInt32Array(533, 532, 531), PackedInt32Array(535, 534, 526), PackedInt32Array(537, 536, 531), PackedInt32Array(540, 520, 512), PackedInt32Array(520, 548, 519), PackedInt32Array(519, 546, 518), PackedInt32Array(518, 545, 517), PackedInt32Array(517, 553, 496), PackedInt32Array(496, 534, 538), PackedInt32Array(534, 553, 541), PackedInt32Array(541, 549, 542), PackedInt32Array(542, 547, 539), PackedInt32Array(539, 547, 543), PackedInt32Array(543, 548, 544), PackedInt32Array(544, 520, 540), PackedInt32Array(548, 552, 519), PackedInt32Array(520, 544, 548), PackedInt32Array(546, 551, 518), PackedInt32Array(519, 552, 546), PackedInt32Array(545, 553, 517), PackedInt32Array(518, 551, 545), PackedInt32Array(553, 534, 496), PackedInt32Array(553, 551, 541), PackedInt32Array(549, 550, 542), PackedInt32Array(541, 546, 549), PackedInt32Array(542, 550, 547), PackedInt32Array(547, 548, 543), PackedInt32Array(548, 550, 552), PackedInt32Array(546, 541, 551), PackedInt32Array(552, 550, 546), PackedInt32Array(545, 551, 553), PackedInt32Array(549, 546, 550), PackedInt32Array(550, 548, 547), PackedInt32Array(555, 554, 530), PackedInt32Array(558, 557, 556), PackedInt32Array(536, 559, 555), PackedInt32Array(561, 560, 533), PackedInt32Array(564, 563, 562), PackedInt32Array(566, 565, 567), PackedInt32Array(567, 565, 569), PackedInt32Array(569, 565, 568), PackedInt32Array(569, 568, 539), PackedInt32Array(528, 555, 530), PackedInt32Array(533, 575, 561), PackedInt32Array(561, 575, 573), PackedInt32Array(573, 576, 570), PackedInt32Array(570, 572, 571), PackedInt32Array(572, 570, 574), PackedInt32Array(574, 576, 575), PackedInt32Array(575, 576, 573), PackedInt32Array(576, 574, 570), PackedInt32Array(556, 577, 572), PackedInt32Array(562, 579, 578), PackedInt32Array(555, 528, 526), PackedInt32Array(578, 580, 558), PackedInt32Array(581, 567, 540), PackedInt32Array(540, 567, 544), PackedInt32Array(544, 567, 569), PackedInt32Array(544, 569, 543), PackedInt32Array(543, 569, 539), PackedInt32Array(578, 564, 562), PackedInt32Array(526, 534, 555), PackedInt32Array(555, 534, 536), PackedInt32Array(578, 558, 556), PackedInt32Array(536, 584, 531), PackedInt32Array(531, 584, 583), PackedInt32Array(531, 583, 585), PackedInt32Array(585, 583, 586), PackedInt32Array(586, 583, 582), PackedInt32Array(586, 582, 572), PackedInt32Array(564, 578, 587), PackedInt32Array(587, 578, 556), PackedInt32Array(534, 605, 536), PackedInt32Array(536, 605, 584), PackedInt32Array(584, 599, 583), PackedInt32Array(583, 608, 582), PackedInt32Array(582, 607, 572), PackedInt32Array(572, 607, 556), PackedInt32Array(556, 607, 587), PackedInt32Array(587, 606, 564), PackedInt32Array(564, 606, 588), PackedInt32Array(588, 596, 589), PackedInt32Array(589, 594, 590), PackedInt32Array(590, 611, 591), PackedInt32Array(591, 610, 592), PackedInt32Array(592, 612, 593), PackedInt32Array(593, 612, 539), PackedInt32Array(539, 612, 542), PackedInt32Array(542, 604, 541), PackedInt32Array(541, 602, 534), PackedInt32Array(534, 601, 605), PackedInt32Array(605, 595, 584), PackedInt32Array(599, 609, 583), PackedInt32Array(584, 595, 599), PackedInt32Array(608, 607, 582), PackedInt32Array(583, 609, 608), PackedInt32Array(607, 606, 587), PackedInt32Array(606, 596, 588), PackedInt32Array(596, 594, 589), PackedInt32Array(594, 611, 590), PackedInt32Array(611, 610, 591), PackedInt32Array(610, 613, 592), PackedInt32Array(592, 603, 612), PackedInt32Array(612, 603, 542), PackedInt32Array(604, 614, 541), PackedInt32Array(542, 597, 604), PackedInt32Array(602, 601, 534), PackedInt32Array(541, 614, 602), PackedInt32Array(601, 595, 605), PackedInt32Array(599, 598, 609), PackedInt32Array(595, 598, 599), PackedInt32Array(608, 596, 607), PackedInt32Array(609, 596, 608), PackedInt32Array(607, 596, 606), PackedInt32Array(596, 609, 594), PackedInt32Array(594, 600, 611), PackedInt32Array(611, 597, 610), PackedInt32Array(613, 603, 592), PackedInt32Array(610, 597, 613), PackedInt32Array(603, 613, 542), PackedInt32Array(604, 600, 614), PackedInt32Array(597, 600, 604), PackedInt32Array(542, 613, 597), PackedInt32Array(602, 595, 601), PackedInt32Array(614, 595, 602), PackedInt32Array(598, 594, 609), PackedInt32Array(595, 614, 598), PackedInt32Array(600, 597, 611), PackedInt32Array(594, 598, 600), PackedInt32Array(600, 598, 614), PackedInt32Array(615, 616, 565), PackedInt32Array(565, 616, 568), PackedInt32Array(568, 616, 539), PackedInt32Array(585, 574, 575), PackedInt32Array(585, 575, 533), PackedInt32Array(585, 533, 531), PackedInt32Array(617, 561, 618), PackedInt32Array(618, 561, 573), PackedInt32Array(618, 573, 619), PackedInt32Array(619, 573, 570), PackedInt32Array(622, 621, 620), PackedInt32Array(624, 623, 622), PackedInt32Array(626, 625, 624), PackedInt32Array(628, 627, 620), PackedInt32Array(627, 630, 629), PackedInt32Array(632, 631, 626), PackedInt32Array(635, 634, 633), PackedInt32Array(624, 632, 626), PackedInt32Array(620, 627, 629), PackedInt32Array(632, 624, 622), PackedInt32Array(629, 636, 620), PackedInt32Array(620, 636, 622), PackedInt32Array(622, 636, 632), PackedInt32Array(638, 637, 635), PackedInt32Array(640, 639, 617), PackedInt32Array(641, 638, 642), PackedInt32Array(642, 638, 643), PackedInt32Array(617, 650, 640), PackedInt32Array(640, 651, 644), PackedInt32Array(644, 647, 629), PackedInt32Array(629, 647, 636), PackedInt32Array(636, 648, 632), PackedInt32Array(632, 648, 633), PackedInt32Array(633, 649, 645), PackedInt32Array(645, 619, 570), PackedInt32Array(619, 646, 618), PackedInt32Array(618, 650, 617), PackedInt32Array(650, 651, 640), PackedInt32Array(651, 646, 644), PackedInt32Array(644, 646, 647), PackedInt32Array(647, 648, 636), PackedInt32Array(648, 649, 633), PackedInt32Array(649, 619, 645), PackedInt32Array(646, 651, 618), PackedInt32Array(619, 649, 646), PackedInt32Array(618, 651, 650), PackedInt32Array(646, 648, 647), PackedInt32Array(648, 646, 649), PackedInt32Array(643, 638, 652), PackedInt32Array(652, 638, 635), PackedInt32Array(652, 635, 633), PackedInt32Array(653, 632, 654), PackedInt32Array(654, 632, 633), PackedInt32Array(643, 652, 570), PackedInt32Array(570, 652, 645), PackedInt32Array(645, 652, 633), PackedInt32Array(656, 658, 629), PackedInt32Array(629, 658, 644), PackedInt32Array(644, 658, 657), PackedInt32Array(644, 657, 655), PackedInt32Array(644, 655, 640), PackedInt32Array(659, 661, 660), PackedInt32Array(662, 664, 663), PackedInt32Array(665, 667, 666), PackedInt32Array(667, 669, 668), PackedInt32Array(669, 671, 670), PackedInt32Array(671, 673, 672), PackedInt32Array(673, 675, 674), PackedInt32Array(675, 677, 676), PackedInt32Array(677, 679, 678), PackedInt32Array(679, 681, 680), PackedInt32Array(681, 683, 682), PackedInt32Array(683, 685, 684), PackedInt32Array(686, 688, 687), PackedInt32Array(688, 690, 689), PackedInt32Array(691, 693, 692), PackedInt32Array(693, 695, 694), PackedInt32Array(695, 697, 696), PackedInt32Array(699, 698, 700), PackedInt32Array(700, 698, 701), PackedInt32Array(702, 661, 703), PackedInt32Array(704, 664, 705), PackedInt32Array(706, 685, 707), PackedInt32Array(708, 690, 709), PackedInt32Array(710, 697, 711), PackedInt32Array(713, 712, 714), PackedInt32Array(716, 715, 717), PackedInt32Array(717, 715, 719), PackedInt32Array(719, 715, 718), PackedInt32Array(721, 720, 700), PackedInt32Array(662, 723, 722), PackedInt32Array(686, 724, 707), PackedInt32Array(691, 725, 709), PackedInt32Array(727, 726, 711), PackedInt32Array(712, 729, 728), PackedInt32Array(715, 730, 714), PackedInt32Array(733, 732, 731), PackedInt32Array(735, 734, 733), PackedInt32Array(738, 737, 736), PackedInt32Array(741, 740, 739), PackedInt32Array(659, 742, 721), PackedInt32Array(722, 744, 743), PackedInt32Array(746, 745, 718), PackedInt32Array(749, 748, 747), PackedInt32Array(751, 750, 749), PackedInt32Array(754, 753, 752), PackedInt32Array(756, 755, 757), PackedInt32Array(757, 755, 758), PackedInt32Array(757, 758, 759), PackedInt32Array(759, 758, 539), PackedInt32Array(728, 760, 727), PackedInt32Array(665, 762, 761), PackedInt32Array(764, 763, 741), PackedInt32Array(743, 765, 703), PackedInt32Array(767, 766, 751), PackedInt32Array(770, 769, 768), PackedInt32Array(664, 662, 722), PackedInt32Array(688, 686, 707), PackedInt32Array(615, 772, 771), PackedInt32Array(774, 773, 738), PackedInt32Array(691, 709, 690), PackedInt32Array(728, 775, 712), PackedInt32Array(712, 775, 714), PackedInt32Array(714, 775, 715), PackedInt32Array(715, 775, 718), PackedInt32Array(698, 776, 701), PackedInt32Array(721, 700, 659), PackedInt32Array(659, 700, 777), PackedInt32Array(777, 700, 701), PackedInt32Array(736, 778, 735), PackedInt32Array(739, 780, 779), PackedInt32Array(783, 782, 781), PackedInt32Array(761, 784, 783), PackedInt32Array(787, 786, 785), PackedInt32Array(761, 667, 665), PackedInt32Array(728, 727, 775), PackedInt32Array(775, 727, 711), PackedInt32Array(775, 711, 718), PackedInt32Array(688, 707, 690), PackedInt32Array(690, 707, 691), PackedInt32Array(790, 789, 788), PackedInt32Array(792, 791, 701), PackedInt32Array(701, 791, 764), PackedInt32Array(705, 664, 793), PackedInt32Array(793, 664, 722), PackedInt32Array(793, 722, 743), PackedInt32Array(793, 743, 703), PackedInt32Array(793, 703, 794), PackedInt32Array(794, 703, 796), PackedInt32Array(794, 796, 795), PackedInt32Array(795, 796, 739), PackedInt32Array(771, 797, 757), PackedInt32Array(799, 798, 705), PackedInt32Array(801, 800, 787), PackedInt32Array(755, 802, 801), PackedInt32Array(799, 804, 805), PackedInt32Array(805, 804, 803), PackedInt32Array(805, 803, 783), PackedInt32Array(783, 803, 761), PackedInt32Array(779, 806, 774), PackedInt32Array(661, 807, 703), PackedInt32Array(703, 807, 796), PackedInt32Array(796, 741, 739), PackedInt32Array(741, 796, 764), PackedInt32Array(764, 796, 701), PackedInt32Array(701, 807, 661), PackedInt32Array(807, 701, 796), PackedInt32Array(685, 683, 761), PackedInt32Array(761, 681, 679), PackedInt32Array(669, 667, 761), PackedInt32Array(681, 761, 683), PackedInt32Array(808, 746, 809), PackedInt32Array(809, 746, 747), PackedInt32Array(781, 810, 811), PackedInt32Array(811, 810, 799), PackedInt32Array(768, 812, 754), PackedInt32Array(736, 735, 733), PackedInt32Array(707, 685, 761), PackedInt32Array(717, 719, 813), PackedInt32Array(813, 719, 718), PackedInt32Array(671, 669, 761), PackedInt32Array(814, 790, 815), PackedInt32Array(815, 790, 731), PackedInt32Array(816, 767, 817), PackedInt32Array(817, 767, 752), PackedInt32Array(697, 718, 711), PackedInt32Array(739, 818, 819), PackedInt32Array(819, 818, 738), PackedInt32Array(819, 738, 736), PackedInt32Array(819, 736, 788), PackedInt32Array(820, 770, 768), PackedInt32Array(693, 718, 695), PackedInt32Array(768, 754, 821), PackedInt32Array(821, 754, 752), PackedInt32Array(821, 752, 767), PackedInt32Array(821, 767, 751), PackedInt32Array(673, 671, 761), PackedInt32Array(615, 771, 616), PackedInt32Array(616, 771, 757), PackedInt32Array(616, 757, 759), PackedInt32Array(616, 759, 539), PackedInt32Array(733, 731, 736), PackedInt32Array(736, 731, 790), PackedInt32Array(736, 790, 788), PackedInt32Array(718, 822, 746), PackedInt32Array(746, 822, 747), PackedInt32Array(747, 822, 749), PackedInt32Array(739, 779, 818), PackedInt32Array(818, 779, 774), PackedInt32Array(818, 774, 738), PackedInt32Array(785, 824, 801), PackedInt32Array(801, 824, 755), PackedInt32Array(755, 824, 758), PackedInt32Array(758, 824, 823), PackedInt32Array(758, 823, 539), PackedInt32Array(801, 787, 785), PackedInt32Array(761, 675, 673), PackedInt32Array(799, 805, 811), PackedInt32Array(811, 805, 781), PackedInt32Array(781, 805, 783), PackedInt32Array(826, 825, 820), PackedInt32Array(820, 825, 770), PackedInt32Array(659, 777, 661), PackedInt32Array(661, 777, 701), PackedInt32Array(785, 820, 768), PackedInt32Array(832, 867, 785), PackedInt32Array(785, 867, 824), PackedInt32Array(824, 839, 823), PackedInt32Array(823, 844, 539), PackedInt32Array(539, 874, 827), PackedInt32Array(827, 851, 828), PackedInt32Array(828, 851, 788), PackedInt32Array(788, 851, 819), PackedInt32Array(819, 872, 739), PackedInt32Array(739, 848, 795), PackedInt32Array(795, 878, 794), PackedInt32Array(794, 849, 793), PackedInt32Array(793, 845, 705), PackedInt32Array(705, 870, 829), PackedInt32Array(829, 846, 830), PackedInt32Array(830, 865, 831), PackedInt32Array(831, 854, 691), PackedInt32Array(691, 854, 832), PackedInt32Array(832, 868, 867), PackedInt32Array(867, 839, 824), PackedInt32Array(839, 844, 823), PackedInt32Array(844, 847, 539), PackedInt32Array(874, 850, 827), PackedInt32Array(539, 856, 874), PackedInt32Array(827, 842, 851), PackedInt32Array(851, 877, 819), PackedInt32Array(872, 848, 739), PackedInt32Array(819, 857, 872), PackedInt32Array(848, 878, 795), PackedInt32Array(878, 836, 794), PackedInt32Array(849, 845, 793), PackedInt32Array(794, 836, 849), PackedInt32Array(845, 870, 705), PackedInt32Array(870, 834, 829), PackedInt32Array(846, 866, 830), PackedInt32Array(829, 834, 846), PackedInt32Array(865, 879, 831), PackedInt32Array(830, 866, 865), PackedInt32Array(831, 879, 854), PackedInt32Array(854, 852, 832), PackedInt32Array(868, 839, 867), PackedInt32Array(832, 869, 868), PackedInt32Array(839, 873, 844), PackedInt32Array(847, 856, 539), PackedInt32Array(844, 835, 847), PackedInt32Array(850, 842, 827), PackedInt32Array(874, 847, 850), PackedInt32Array(856, 847, 874), PackedInt32Array(842, 877, 851), PackedInt32Array(877, 857, 819), PackedInt32Array(872, 857, 848), PackedInt32Array(848, 859, 878), PackedInt32Array(878, 859, 836), PackedInt32Array(849, 836, 845), PackedInt32Array(845, 834, 870), PackedInt32Array(846, 855, 866), PackedInt32Array(834, 861, 846), PackedInt32Array(865, 841, 879), PackedInt32Array(866, 837, 865), PackedInt32Array(879, 840, 854), PackedInt32Array(852, 869, 832), PackedInt32Array(854, 840, 852), PackedInt32Array(868, 869, 839), PackedInt32Array(873, 876, 844), PackedInt32Array(839, 869, 873), PackedInt32Array(835, 864, 847), PackedInt32Array(844, 876, 835), PackedInt32Array(850, 838, 842), PackedInt32Array(847, 838, 850), PackedInt32Array(842, 857, 877), PackedInt32Array(857, 859, 848), PackedInt32Array(859, 860, 836), PackedInt32Array(836, 863, 845), PackedInt32Array(845, 862, 834), PackedInt32Array(855, 837, 866), PackedInt32Array(846, 861, 855), PackedInt32Array(834, 862, 861), PackedInt32Array(841, 840, 879), PackedInt32Array(865, 837, 841), PackedInt32Array(852, 871, 869), PackedInt32Array(840, 871, 852), PackedInt32Array(873, 833, 876), PackedInt32Array(869, 871, 873), PackedInt32Array(864, 838, 847), PackedInt32Array(835, 853, 864), PackedInt32Array(876, 843, 835), PackedInt32Array(838, 860, 842), PackedInt32Array(842, 860, 857), PackedInt32Array(857, 860, 859), PackedInt32Array(860, 864, 836), PackedInt32Array(863, 862, 845), PackedInt32Array(836, 853, 863), PackedInt32Array(855, 858, 837), PackedInt32Array(861, 875, 855), PackedInt32Array(862, 843, 861), PackedInt32Array(841, 858, 840), PackedInt32Array(837, 858, 841), PackedInt32Array(840, 858, 871), PackedInt32Array(833, 858, 876), PackedInt32Array(873, 871, 833), PackedInt32Array(864, 860, 838), PackedInt32Array(853, 836, 864), PackedInt32Array(835, 843, 853), PackedInt32Array(876, 875, 843), PackedInt32Array(863, 843, 862), PackedInt32Array(853, 843, 863), PackedInt32Array(855, 875, 858), PackedInt32Array(861, 843, 875), PackedInt32Array(858, 833, 871), PackedInt32Array(858, 875, 876), PackedInt32Array(677, 675, 761), PackedInt32Array(707, 831, 691), PackedInt32Array(831, 880, 830), PackedInt32Array(830, 804, 829), PackedInt32Array(829, 799, 705), PackedInt32Array(799, 829, 804), PackedInt32Array(804, 830, 803), PackedInt32Array(803, 880, 761), PackedInt32Array(761, 880, 707), PackedInt32Array(707, 880, 831), PackedInt32Array(880, 803, 830), PackedInt32Array(768, 883, 785), PackedInt32Array(785, 884, 832), PackedInt32Array(832, 693, 691), PackedInt32Array(693, 891, 718), PackedInt32Array(718, 890, 751), PackedInt32Array(751, 886, 821), PackedInt32Array(821, 885, 768), PackedInt32Array(883, 884, 785), PackedInt32Array(768, 885, 883), PackedInt32Array(884, 887, 832), PackedInt32Array(832, 891, 693), PackedInt32Array(891, 888, 718), PackedInt32Array(890, 889, 751), PackedInt32Array(718, 888, 890), PackedInt32Array(886, 892, 821), PackedInt32Array(751, 889, 886), PackedInt32Array(821, 892, 885), PackedInt32Array(883, 881, 884), PackedInt32Array(885, 881, 883), PackedInt32Array(887, 893, 832), PackedInt32Array(884, 881, 887), PackedInt32Array(832, 893, 891), PackedInt32Array(891, 893, 888), PackedInt32Array(890, 882, 889), PackedInt32Array(888, 882, 890), PackedInt32Array(886, 881, 892), PackedInt32Array(889, 881, 886), PackedInt32Array(892, 881, 885), PackedInt32Array(887, 888, 893), PackedInt32Array(881, 882, 887), PackedInt32Array(882, 881, 889), PackedInt32Array(888, 887, 882), PackedInt32Array(761, 679, 677), PackedInt32Array(749, 822, 751), PackedInt32Array(751, 822, 718), PackedInt32Array(718, 697, 695), PackedInt32Array(896, 895, 894), PackedInt32Array(899, 898, 897), PackedInt32Array(901, 900, 899), PackedInt32Array(903, 902, 901), PackedInt32Array(896, 897, 904), PackedInt32Array(788, 905, 903), PackedInt32Array(899, 906, 901), PackedInt32Array(901, 906, 903), PackedInt32Array(897, 896, 894), PackedInt32Array(903, 906, 907), PackedInt32Array(907, 906, 899), PackedInt32Array(907, 899, 897), PackedInt32Array(912, 897, 894), PackedInt32Array(897, 916, 907), PackedInt32Array(907, 914, 903), PackedInt32Array(903, 828, 788), PackedInt32Array(828, 914, 827), PackedInt32Array(827, 921, 539), PackedInt32Array(539, 921, 908), PackedInt32Array(908, 921, 909), PackedInt32Array(909, 915, 910), PackedInt32Array(910, 919, 911), PackedInt32Array(911, 920, 912), PackedInt32Array(912, 920, 897), PackedInt32Array(916, 913, 907), PackedInt32Array(897, 920, 916), PackedInt32Array(914, 828, 903), PackedInt32Array(907, 913, 914), PackedInt32Array(914, 917, 827), PackedInt32Array(827, 915, 921), PackedInt32Array(921, 915, 909), PackedInt32Array(915, 918, 910), PackedInt32Array(919, 920, 911), PackedInt32Array(910, 917, 919), PackedInt32Array(916, 920, 913), PackedInt32Array(913, 917, 914), PackedInt32Array(917, 918, 827), PackedInt32Array(827, 918, 915), PackedInt32Array(918, 917, 910), PackedInt32Array(919, 913, 920), PackedInt32Array(917, 913, 919), PackedInt32Array(564, 588, 894), PackedInt32Array(894, 588, 912), PackedInt32Array(912, 588, 589), PackedInt32Array(912, 589, 911), PackedInt32Array(911, 589, 590), PackedInt32Array(911, 590, 910), PackedInt32Array(910, 590, 591), PackedInt32Array(910, 591, 592), PackedInt32Array(910, 592, 909), PackedInt32Array(909, 592, 908), PackedInt32Array(908, 592, 593), PackedInt32Array(908, 593, 539)]
agent_height = 2.0

[sub_resource type="Gradient" id="Gradient_vr1m7"]
offsets = PackedFloat32Array(0.2, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_d8lcj"]
noise_type = 2
frequency = 0.03
cellular_jitter = 3.0
cellular_return_type = 0
domain_warp_enabled = true
domain_warp_type = 1
domain_warp_amplitude = 50.0
domain_warp_fractal_type = 2
domain_warp_fractal_lacunarity = 1.5
domain_warp_fractal_gain = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_bov7h"]
seamless = true
color_ramp = SubResource("Gradient_vr1m7")
noise = SubResource("FastNoiseLite_d8lcj")

[sub_resource type="Shader" id="Shader_amoo3"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

/* This shader is generated based upon the debug views you have selected.
 * The terrain function depends on this shader. So don't change:
 * - vertex positioning in vertex()
 * - terrain normal calculation in fragment()
 * - the last function being fragment() as the editor injects code before the closing }
 *
 * Most will only want to customize the material calculation and PBR application in fragment()
 *
 * Uniforms that begin with _ are private and will not display in the inspector. However, 
 * you can set them via code. You are welcome to create more of your own hidden uniforms.
 *
 * This system only supports albedo, height, normal, roughness. Most textures don't need the other
 * PBR channels. Height can be used as an approximation for AO. For the rare textures do need
 * additional channels, you can add maps for that one texture. e.g. an emissive map for lava.
 *
 */

// Private uniforms

uniform float _region_size = 1024.0;
uniform float _region_texel_size = 0.0009765625; // = 1/1024
uniform float _mesh_vertex_spacing = 1.0;
uniform float _mesh_vertex_density = 1.0; // = 1/_mesh_vertex_spacing
uniform int _region_map_size = 16;
uniform int _region_map[256];
uniform vec2 _region_offsets[256];
uniform sampler2DArray _height_maps : repeat_disable;
uniform usampler2DArray _control_maps : repeat_disable;
uniform sampler2DArray _color_maps : source_color, filter_linear_mipmap_anisotropic, repeat_disable;
uniform sampler2DArray _texture_array_albedo : source_color, filter_linear_mipmap_anisotropic, repeat_enable;
uniform sampler2DArray _texture_array_normal : hint_normal, filter_linear_mipmap_anisotropic, repeat_enable;
uniform sampler2D noise_texture : source_color, filter_linear_mipmap_anisotropic, repeat_enable;

uniform float _texture_uv_scale_array[32];
uniform float _texture_detile_array[32];
uniform vec4 _texture_color_array[32];
uniform uint _background_mode = 1u;  // NONE = 0, FLAT = 1, NOISE = 2
uniform uint _mouse_layer = 0x80000000u; // Layer 32

// Public uniforms
uniform float vertex_normals_distance : hint_range(0, 1024) = 128.0;
uniform bool height_blending = true;
uniform float blend_sharpness : hint_range(0, 1) = 0.87;
uniform float auto_slope : hint_range(0, 10) = 1.0;
uniform float auto_height_reduction : hint_range(0, 1) = 0.1;
uniform int auto_base_texture : hint_range(0, 31) = 0;
uniform int auto_overlay_texture : hint_range(0, 31) = 1;

uniform int dual_scale_texture : hint_range(0,31) = 0;
uniform float dual_scale_reduction : hint_range(0.001,1) = 0.3;
uniform float tri_scale_reduction : hint_range(0.001,1) = 0.3;
uniform float dual_scale_far : hint_range(0,1000) = 170.0;
uniform float dual_scale_near : hint_range(0,1000) = 100.0;

uniform vec3 macro_variation1 : source_color = vec3(1.);
uniform vec3 macro_variation2 : source_color = vec3(1.);
// Generic noise at 3 scales, which can be used for anything 
uniform float noise1_scale : hint_range(0.001, 1.) = 0.04;	// Used for macro variation 1. Scaled up 10x
uniform float noise1_angle : hint_range(0, 6.283) = 0.;
uniform vec2 noise1_offset = vec2(0.5);
uniform float noise2_scale : hint_range(0.001, 1.) = 0.076;	// Used for macro variation 2. Scaled up 10x
uniform float noise3_scale : hint_range(0.001, 1.) = 0.225;  // Used for texture blending edge.

// Varyings & Types

struct Material {
	vec4 alb_ht;
	vec4 nrm_rg;
	int base;
	int over;
	float blend;
};

varying flat vec3 v_vertex;	// World coordinate vertex location
varying flat vec3 v_camera_pos;
varying float v_vertex_xz_dist;
varying flat ivec3 v_region;
varying flat vec2 v_uv_offset;
varying flat vec2 v_uv2_offset;
varying vec3 v_normal;
varying float v_region_border_mask;

////////////////////////
// Vertex
////////////////////////

// Takes in UV world space coordinates, returns ivec3 with:
// XY: (0 to _region_size) coordinates within a region
// Z: layer index used for texturearrays, -1 if not in a region
ivec3 get_region_uv(vec2 uv) {
	uv *= _region_texel_size;
	ivec2 pos = ivec2(floor(uv)) + (_region_map_size / 2);
	int bounds = int(pos.x >= 0 && pos.x < _region_map_size && pos.y >= 0 && pos.y < _region_map_size);
	int layer_index = _region_map[ pos.y * _region_map_size + pos.x ] * bounds - 1;
	return ivec3(ivec2((uv - _region_offsets[layer_index]) * _region_size), layer_index);
}

// Takes in UV2 region space coordinates, returns vec3 with:
// XY: (0 to 1) coordinates within a region
// Z: layer index used for texturearrays, -1 if not in a region
vec3 get_region_uv2(vec2 uv) {
	// Vertex function added half a texel to UV2, to center the UV's.  vertex(), fragment() and get_height()
	// call this with reclaimed versions of UV2, so to keep the last row/column within the correct
	// window, take back the half pixel before the floor(). 
	ivec2 pos = ivec2(floor(uv - vec2(_region_texel_size * 0.5))) + (_region_map_size / 2);
	int bounds = int(pos.x >= 0 && pos.x < _region_map_size && pos.y >= 0 && pos.y < _region_map_size);
	int layer_index = _region_map[ pos.y * _region_map_size + pos.x ] * bounds - 1;
	// The return value is still texel-centered.
	return vec3(uv - _region_offsets[layer_index], float(layer_index));
}

// World Noise

uniform sampler2D _region_blend_map : hint_default_black, filter_linear, repeat_disable;
uniform int world_noise_max_octaves : hint_range(0, 15) = 4;
uniform int world_noise_min_octaves : hint_range(0, 15) = 2;
uniform float world_noise_lod_distance : hint_range(0, 40000, 1) = 7500.;
uniform float world_noise_scale : hint_range(0.25, 20, 0.01) = 5.0;
uniform float world_noise_height : hint_range(0, 1000, 0.1) = 64.0;
uniform vec3 world_noise_offset = vec3(0.0);
uniform float world_noise_blend_near : hint_range(0, .95, 0.01) = 0.5;
uniform float world_noise_blend_far : hint_range(.05, 1, 0.01) = 1.0;

float hashf(float f) {
	return fract(sin(f) * 1e4);
}

float hashv2(vec2 v) {
	return fract(1e4 * sin(17.0 * v.x + v.y * 0.1) * (0.1 + abs(sin(v.y * 13.0 + v.x))));
}

// https://iquilezles.org/articles/morenoise/
vec3 noise2D(vec2 x) {
    vec2 f = fract(x);
    // Quintic Hermine Curve.  Similar to SmoothStep()
    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);
    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);

    vec2 p = floor(x);

	// Four corners in 2D of a tile
	float a = hashv2( p+vec2(0,0) );
    float b = hashv2( p+vec2(1,0) );
    float c = hashv2( p+vec2(0,1) );
    float d = hashv2( p+vec2(1,1) );

    // Mix 4 corner percentages
    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   a - b - c + d;
    return vec3( k0 + k1 * u.x + k2 * u.y + k3 * u.x * u.y,
                du * ( vec2(k1, k2) + k3 * u.yx) );
}

float world_noise(vec2 p) {
    float a = 0.0;
    float b = 1.0;
    vec2  d = vec2(0.0);

    int octaves = int( clamp(
	float(world_noise_max_octaves) - floor(v_vertex_xz_dist/(world_noise_lod_distance)),
    float(world_noise_min_octaves), float(world_noise_max_octaves)) );
	
    for( int i=0; i < octaves; i++ ) {
        vec3 n = noise2D(p);
        d += n.yz;
        a += b * n.x / (1.0 + dot(d,d));
        b *= 0.5;
        p = mat2( vec2(0.8, -0.6), vec2(0.6, 0.8) ) * p * 2.0;
    }
    return a;
}

// World Noise end

// 1 lookup
float get_height(vec2 uv) {
	highp float height = 0.0;
	vec3 region = get_region_uv2(uv);
	if (region.z >= 0.) {
		height = texture(_height_maps, region).r;
	}
	// World Noise
   	if (_background_mode == 2u) {
	    float weight = texture(_region_blend_map, (uv / float(_region_map_size)) + 0.5).r;
	    float rmap_half_size = float(_region_map_size) * .5;
	    if (abs(uv.x) > rmap_half_size + .5 || abs(uv.y) > rmap_half_size + .5) {
		    weight = 0.;
	    } else {
		    if (abs(uv.x) > rmap_half_size - .5) {
			    weight = mix(weight, 0., abs(uv.x) - (rmap_half_size-.5));
		    }
		    if (abs(uv.y) > rmap_half_size - .5) {
			    weight = mix(weight, 0., abs(uv.y) - (rmap_half_size-.5));
		    }
	    }
	    height = mix(height, world_noise((uv + world_noise_offset.xz) * world_noise_scale * .1) *
            world_noise_height * 10. + world_noise_offset.y * 100.,
		    clamp(smoothstep(world_noise_blend_near, world_noise_blend_far, 1.0 - weight), 0.0, 1.0));
    }
 	return height;
}

void vertex() {
	// Get camera pos in world vertex coords
	v_camera_pos = INV_VIEW_MATRIX[3].xyz;

	// Get vertex of flat plane in world coordinates and set world UV
	v_vertex = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;

	// Camera distance to vertex on flat plane
	v_vertex_xz_dist = length(v_vertex.xz - v_camera_pos.xz);

	// UV coordinates in world space. Values are 0 to _region_size within regions
	UV = round(v_vertex.xz * _mesh_vertex_density);

	// UV coordinates in region space + texel offset. Values are 0 to 1 within regions
	UV2 = (UV + vec2(0.5)) * _region_texel_size;

	// Discard vertices for Holes. 1 lookup
	v_region = get_region_uv(UV);
	uint control = texelFetch(_control_maps, v_region, 0).r;
	bool hole = bool(control >>2u & 0x1u);

	// Show holes to all cameras except mouse camera (on exactly 1 layer)
	if ( !(CAMERA_VISIBLE_LAYERS == _mouse_layer) && 
			(hole || (_background_mode == 0u && v_region.z < 0)) ) {
		VERTEX.x = 0. / 0.;
	} else {		
		// Set final vertex height & calculate vertex normals. 3 lookups.
		VERTEX.y = get_height(UV2);
		v_vertex.y = VERTEX.y;
		v_normal = vec3(
			v_vertex.y - get_height(UV2 + vec2(_region_texel_size, 0)),
			_mesh_vertex_spacing,
			v_vertex.y - get_height(UV2 + vec2(0, _region_texel_size))
		);
		// Due to a bug caused by the GPUs linear interpolation across edges of region maps,
		// mask region edges and use vertex normals only across region boundaries.
		v_region_border_mask = mod(UV.x + 2.5, _region_size) - fract(UV.x) < 5.0 || mod(UV.y + 2.5, _region_size) - fract(UV.y) < 5.0 ? 1. : 0.;
	}
		
	// Transform UVs to local to avoid poor precision during varying interpolation.
	v_uv_offset = MODEL_MATRIX[3].xz * _mesh_vertex_density;
	UV -= v_uv_offset;
	v_uv2_offset = v_uv_offset * _region_texel_size;
	UV2 -= v_uv2_offset;
}

////////////////////////
// Fragment
////////////////////////

// 0 - 3 lookups
vec3 get_normal(vec2 uv, out vec3 tangent, out vec3 binormal) {
	float u, v, height;
	vec3 normal;
	// Use vertex normals within radius of vertex_normals_distance, and along region borders.
	if (v_region_border_mask > 0.5 || v_vertex_xz_dist < vertex_normals_distance) {
		normal = normalize(v_normal);
	} else {
		height = get_height(uv);
		u = height - get_height(uv + vec2(_region_texel_size, 0));
		v = height - get_height(uv + vec2(0, _region_texel_size));
		normal = normalize(vec3(u, _mesh_vertex_spacing, v));
	}
	tangent = cross(normal, vec3(0, 0, 1));
	binormal = cross(normal, tangent);
	return normal;
}

vec3 unpack_normal(vec4 rgba) {
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	n.z *= -1.0;
	return n;
}

vec4 pack_normal(vec3 n, float a) {
	n.z *= -1.0;
	return vec4((n.xzy + vec3(1.0)) * 0.5, a);
}

float random(in vec2 xy) {
	return fract(sin(dot(xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 rotate(vec2 v, float cosa, float sina) {
	return vec2(cosa * v.x - sina * v.y, sina * v.x + cosa * v.y);
}

// Moves a point around a pivot point.
vec2 rotate_around(vec2 point, vec2 pivot, float angle){
	float x = pivot.x + (point.x - pivot.x) * cos(angle) - (point.y - pivot.y) * sin(angle);
	float y = pivot.y + (point.x - pivot.x) * sin(angle) + (point.y - pivot.y) * cos(angle);
	return vec2(x, y);
}

vec4 height_blend(vec4 a_value, float a_height, vec4 b_value, float b_height, float blend) {
	if(height_blending) {
		float ma = max(a_height + (1.0 - blend), b_height + blend) - (1.001 - blend_sharpness);
	    float b1 = max(a_height + (1.0 - blend) - ma, 0.0);
	    float b2 = max(b_height + blend - ma, 0.0);
	    return (a_value * b1 + b_value * b2) / (b1 + b2);
	} else {
		float contrast = 1.0 - blend_sharpness;
		float factor = (blend - contrast) / contrast;
		return mix(a_value, b_value, clamp(factor, 0.0, 1.0));
	}
}

vec2 detiling(vec2 uv, vec2 uv_center, int mat_id, inout float normal_rotation){
	if (_texture_detile_array[mat_id] >= 0.001){
		uv_center = floor(uv_center) + 0.5;
		float detile = (random(uv_center) - 0.5) * 2.0 * TAU * _texture_detile_array[mat_id]; // -180deg to 180deg
		uv = rotate_around(uv, uv_center, detile);
		// Accumulate total rotation for normal rotation
		normal_rotation += detile;
	}
	return uv;
}

vec2 rotate_normal(vec2 normal, float angle) {
	angle += PI * 0.5;
	float new_y = dot(vec2(cos(angle), sin(angle)), normal);
	angle -= PI * 0.5;
	float new_x = dot(vec2(cos(angle) ,sin(angle)) ,normal);
	return vec2(new_x, new_y);
}

// 2-4 lookups
void get_material(vec2 base_uv, uint control, ivec3 iuv_center, vec3 normal, out Material out_mat) {
	out_mat = Material(vec4(0.), vec4(0.), 0, 0, 0.0);
	vec2 uv_center = vec2(iuv_center.xy);
	int region = iuv_center.z;

	// Enable Autoshader if outside regions or painted in regions, otherwise manual painted
	bool auto_shader = region < 0 || bool(control & 0x1u);
	out_mat.base = int(auto_shader) * auto_base_texture + int(!auto_shader) * int(control >>27u & 0x1Fu);
	out_mat.over = int(auto_shader) * auto_overlay_texture + int(!auto_shader) * int(control >> 22u & 0x1Fu);
	out_mat.blend = float(auto_shader) * clamp(
			dot(vec3(0., 1., 0.), normal * auto_slope * 2. - (auto_slope * 2. - 1.)) 
			- auto_height_reduction * .01 * v_vertex.y // Reduce as vertices get higher
			, 0., 1.) + 
			 float(!auto_shader) * float(control >>14u & 0xFFu) * 0.003921568627450; // 1./255.0		

	// Control map scale & rotation, apply to both base and 
	// uv_center. Translate uv center to the current region.
	uv_center += _region_offsets[region] * _region_size;
	// Define base scale from control map value as array index. 0.5 as baseline.
	float[8] scale_array = { 0.5, 0.4, 0.3, 0.2, 0.1, 0.8, 0.7, 0.6};
	float control_scale = scale_array[(control >>7u & 0x7u)];
	base_uv *= control_scale;
	uv_center *=  control_scale;
	// calculate baseline derivatives
	vec2 ddx = dFdxCoarse(base_uv);
	vec2 ddy = dFdyCoarse(base_uv);
	// Apply global uv rotation from control map.
	float uv_rotation = float(control >>10u & 0xFu) / 16. * TAU;
	base_uv = rotate_around(base_uv, vec2(0), uv_rotation);
	uv_center = rotate_around(uv_center, vec2(0), uv_rotation);

	vec2 matUV = base_uv;
	vec4 albedo_ht = vec4(0.);
	vec4 normal_rg = vec4(0.5f, 0.5f, 1.0f, 1.0f);
	vec4 albedo_far = vec4(0.);
	vec4 normal_far = vec4(0.5f, 0.5f, 1.0f, 1.0f);
	float mat_scale = _texture_uv_scale_array[out_mat.base];
	float normal_angle = uv_rotation;
	vec2 ddx1 = ddx;
	vec2 ddy1 = ddy;
	
	// If dual scaling, apply to base texture
	if(region < 0) {
		mat_scale *= tri_scale_reduction;
	}
	//each time we change scale, recalculate antitiling from baseline to maintain continuity.
	matUV = detiling(base_uv * mat_scale, uv_center * mat_scale, out_mat.base, normal_angle);
	ddx1 *= mat_scale;
	ddy1 *= mat_scale;
	albedo_ht = textureGrad(_texture_array_albedo, vec3(matUV, float(out_mat.base)), ddx1, ddy1);
	normal_rg = textureGrad(_texture_array_normal, vec3(matUV, float(out_mat.base)), ddx1, ddy1);

	// Unpack & rotate base normal for blending
	normal_rg.xz = unpack_normal(normal_rg).xz;
	normal_rg.xz = rotate_normal(normal_rg.xz, normal_angle);

	if(out_mat.base == dual_scale_texture || out_mat.over == dual_scale_texture) {
		mat_scale *= dual_scale_reduction;
		ddx1 *= dual_scale_reduction;
		ddy1 *= dual_scale_reduction;
		float dual_scale_normal = uv_rotation; //do not add near & far rotations
		// Do not apply detiling if tri-scale reduction occurs.
		matUV = region < 0 ? base_uv * mat_scale : detiling(base_uv * mat_scale, uv_center * mat_scale, dual_scale_texture, dual_scale_normal);
		albedo_far = textureGrad(_texture_array_albedo, vec3(matUV, float(dual_scale_texture)), ddx1, ddy1);
		normal_far = textureGrad(_texture_array_normal, vec3(matUV, float(dual_scale_texture)), ddx1, ddy1);

		// Unpack & rotate dual scale normal for blending
		normal_far.xz = unpack_normal(normal_far).xz;
		normal_far.xz = rotate_normal(normal_far.xz, dual_scale_normal);
	}

	float far_factor = clamp(smoothstep(dual_scale_near, dual_scale_far, length(v_vertex - v_camera_pos)), 0.0, 1.0);
	if(out_mat.base == dual_scale_texture) {
		albedo_ht = mix(albedo_ht, albedo_far, far_factor);
		normal_rg = mix(normal_rg, normal_far, far_factor);
	}

	// Apply color to base
	albedo_ht.rgb *= _texture_color_array[out_mat.base].rgb;

	// Setup overlay texture to blend
	float mat_scale2 = _texture_uv_scale_array[out_mat.over];
	float normal_angle2 = uv_rotation;
	vec2 matUV2 = detiling(base_uv * mat_scale2, uv_center * mat_scale2, out_mat.over, normal_angle2);
	vec2 ddx2 = ddx * mat_scale2;
	vec2 ddy2 = ddy * mat_scale2;
	vec4 albedo_ht2 = textureGrad(_texture_array_albedo, vec3(matUV2, float(out_mat.over)), ddx2, ddy2);
	vec4 normal_rg2 = textureGrad(_texture_array_normal, vec3(matUV2, float(out_mat.over)), ddx2, ddy2);

	// Though it would seem having the above lookups in this block, or removing the branch would
	// be more optimal, the first introduces artifacts #276, and the second is noticably slower. 
	// It seems the branching off dual scaling and the color array lookup is more optimal.
	if (out_mat.blend > 0.f) {
		// Unpack & rotate overlay normal for blending
		normal_rg2.xz = unpack_normal(normal_rg2).xz;
		normal_rg2.xz = rotate_normal(normal_rg2.xz, normal_angle2);

		// If dual scaling, apply to overlay texture
		if(out_mat.over == dual_scale_texture) {
			albedo_ht2 = mix(albedo_ht2, albedo_far, far_factor);
			normal_rg2 = mix(normal_rg2, normal_far, far_factor);
		}

		// Apply color to overlay
		albedo_ht2.rgb *= _texture_color_array[out_mat.over].rgb;

		// Blend overlay and base
		albedo_ht = height_blend(albedo_ht, albedo_ht.a, albedo_ht2, albedo_ht2.a, out_mat.blend);
		normal_rg = height_blend(normal_rg, albedo_ht.a, normal_rg2, albedo_ht2.a, out_mat.blend);
	}
	
	// Repack normals and return material
	normal_rg = pack_normal(normal_rg.xyz, normal_rg.a);
	out_mat.alb_ht = albedo_ht;
	out_mat.nrm_rg = normal_rg;
	return;
}

float blend_weights(float weight, float detail) {
	weight = smoothstep(0.0, 1.0, weight);
	weight = sqrt(weight * 0.5);
	float result = max(0.1 * weight, 10.0 * (weight + detail) + 1.0f - (detail + 10.0));
	return result;
}

void fragment() {
	// Recover UVs
	vec2 uv = UV + v_uv_offset;
	vec2 uv2 = UV2 + v_uv2_offset;

	// Calculate Terrain Normals. 4 lookups
	vec3 w_tangent, w_binormal;
	vec3 w_normal = get_normal(uv2, w_tangent, w_binormal);
	NORMAL = mat3(VIEW_MATRIX) * w_normal;
	TANGENT = mat3(VIEW_MATRIX) * w_tangent;
	BINORMAL = mat3(VIEW_MATRIX) * w_binormal;

	// Idenfity 4 vertices surrounding this pixel
	vec2 texel_pos = uv;
	highp vec2 texel_pos_floor = floor(uv);
	
	// Create a cross hatch grid of alternating 0/1 horizontal and vertical stripes 1 unit wide in XY 
	vec4 mirror = vec4(fract(texel_pos_floor * 0.5) * 2.0, 1.0, 1.0);
	// And the opposite grid in ZW
	mirror.zw = vec2(1.0) - mirror.xy;

	// Get the region and control map ID for the vertices
	ivec3 indexUV[4] = {
		get_region_uv(texel_pos_floor + mirror.xy),
		get_region_uv(texel_pos_floor + mirror.xw),
		get_region_uv(texel_pos_floor + mirror.zy),
		get_region_uv(texel_pos_floor + mirror.zw)
	};

	// Lookup adjacent vertices. 4 lookups
	uint control[4] = {
		texelFetch(_control_maps, indexUV[0], 0).r,
		texelFetch(_control_maps, indexUV[1], 0).r,
		texelFetch(_control_maps, indexUV[2], 0).r,
		texelFetch(_control_maps, indexUV[3], 0).r
	};

	// Get the textures for each vertex. 8-16 lookups (2-4 ea)
	Material mat[4];
	get_material(uv, control[0], indexUV[0], w_normal, mat[0]);
	get_material(uv, control[1], indexUV[1], w_normal, mat[1]);
	get_material(uv, control[2], indexUV[2], w_normal, mat[2]);
	get_material(uv, control[3], indexUV[3], w_normal, mat[3]);

	// Calculate weight for the pixel position between the vertices
	// Bilinear interpolation of difference of uv and floor(uv)
	vec2 weights1 = clamp(texel_pos - texel_pos_floor, 0, 1);
	weights1 = mix(weights1, vec2(1.0) - weights1, mirror.xy);
	vec2 weights0 = vec2(1.0) - weights1;
	// Adjust final weights by texture's height/depth + noise. 1 lookup
	float noise3 = texture(noise_texture, uv*noise3_scale).r;
	vec4 weights;
	weights.x = blend_weights(weights0.x * weights0.y, clamp(mat[0].alb_ht.a + noise3, 0., 1.));
	weights.y = blend_weights(weights0.x * weights1.y, clamp(mat[1].alb_ht.a + noise3, 0., 1.));
	weights.z = blend_weights(weights1.x * weights0.y, clamp(mat[2].alb_ht.a + noise3, 0., 1.));
	weights.w = blend_weights(weights1.x * weights1.y, clamp(mat[3].alb_ht.a + noise3, 0., 1.));
	float weight_sum = weights.x + weights.y + weights.z + weights.w;
	float weight_inv = 1.0 / weight_sum;

	// Weighted average of albedo & height
	vec4 albedo_height = weight_inv * (
		mat[0].alb_ht * weights.x +
		mat[1].alb_ht * weights.y +
		mat[2].alb_ht * weights.z +
		mat[3].alb_ht * weights.w );

	// Weighted average of normal & rough
	vec4 normal_rough = weight_inv * (
		mat[0].nrm_rg * weights.x +
		mat[1].nrm_rg * weights.y +
		mat[2].nrm_rg * weights.z +
		mat[3].nrm_rg * weights.w );

	// Determine if we're in a region or not (region_uv.z>0)
	vec3 region_uv = get_region_uv2(uv2);

	// Colormap. 1 lookup
	vec4 color_map = vec4(1., 1., 1., .5);
	if (region_uv.z >= 0.) {
		float lod = textureQueryLod(_color_maps, uv2.xy).y;
		color_map = textureLod(_color_maps, region_uv, lod);
	}

	// Macro variation. 2 Lookups
	float noise1 = texture(noise_texture, rotate(uv*noise1_scale * .1, cos(noise1_angle), sin(noise1_angle)) + noise1_offset).r;
	float noise2 = texture(noise_texture, uv*noise2_scale * .1).r;
	vec3 macrov = mix(macro_variation1, vec3(1.), clamp(noise1 + v_vertex_xz_dist * .0002, 0., 1.));
	macrov *= mix(macro_variation2, vec3(1.), clamp(noise2 + v_vertex_xz_dist * .0002, 0., 1.));

	// Wetness/roughness modifier, converting 0-1 range to -1 to 1 range
	float roughness = fma(color_map.a - 0.5, 2.0, normal_rough.a);

	// Apply PBR
	ALBEDO = albedo_height.rgb * color_map.rgb * macrov;
	ROUGHNESS = roughness;
	SPECULAR = 1. - normal_rough.a;
	NORMAL_MAP = normal_rough.rgb;
	NORMAL_MAP_DEPTH = 1.0;

}

"

[sub_resource type="Terrain3DMaterial" id="Terrain3DMaterial_yp0ed"]
_shader_parameters = {
"_mouse_layer": 2147483648,
"auto_base_texture": 0,
"auto_height_reduction": 0.1,
"auto_overlay_texture": 1,
"auto_slope": 1.0,
"blend_sharpness": 0.87,
"dual_scale_far": 170.0,
"dual_scale_near": 100.0,
"dual_scale_reduction": 0.3,
"dual_scale_texture": 0,
"height_blending": true,
"macro_variation1": Color(0.878431, 0.862745, 0.901961, 1),
"macro_variation2": Color(0.898039, 0.898039, 0.803922, 1),
"noise1_angle": 0.1,
"noise1_offset": Vector2(0.5, 0.5),
"noise1_scale": 0.04,
"noise2_scale": 0.076,
"noise3_scale": 0.225,
"noise_texture": SubResource("NoiseTexture2D_bov7h"),
"tri_scale_reduction": 0.3,
"vertex_normals_distance": 128.0,
"world_noise_blend_far": 1.0,
"world_noise_blend_near": 0.7,
"world_noise_height": 34.0,
"world_noise_lod_distance": 7500.0,
"world_noise_max_octaves": 4,
"world_noise_min_octaves": 2,
"world_noise_offset": Vector3(1.485, -1.01, 1.9),
"world_noise_scale": 9.85
}
world_background = 2
auto_shader = true
dual_scaling = true
shader_override = SubResource("Shader_amoo3")
show_navigation = true

[node name="Main" type="Node"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_3d6es")

[node name="Ground" type="StaticBody3D" parent="."]
collision_layer = 4294967295

[node name="CollisionShape" type="CollisionShape3D" parent="Ground"]
shape = SubResource("WorldBoundaryShape3D_fc7yi")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)
mesh = SubResource("BoxMesh_qfr0p")

[node name="Lighting" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.5, 0.866025, 0, -0.866025, 0.5, 0, 8, -2)
shadow_enabled = true
shadow_transmittance_bias = 1.0

[node name="Player" parent="." instance=ExtResource("1_y6aoc")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 440, 137, 325)

[node name="Turk" parent="." node_paths=PackedStringArray("navmesh") instance=ExtResource("6_x66dh")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 328, 107, 359)
designated_location = Vector3(490, 219, 596)
navmesh = NodePath("../NavMesh")

[node name="TestArbiter" parent="." instance=ExtResource("6_2m7rr")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 471, 164, 428)
shooting_range = 60.0

[node name="NavMesh" type="NavigationRegion3D" parent="."]
navigation_mesh = SubResource("NavigationMesh_3mdr1")

[node name="Terrain3D" type="Terrain3D" parent="NavMesh"]
storage = ExtResource("3_g5m1t")
material = SubResource("Terrain3DMaterial_yp0ed")
assets = ExtResource("5_l6jr1")
render_cull_margin = 1000.0
collision_layer = 4294967295
collision_mask = 3
mesh_size = 64
